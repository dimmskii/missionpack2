code
proc CG_MachineGunEjectBrass 136 8
file "../cg_weapons.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:/*
;7:==========================
;8:CG_MachineGunEjectBrass
;9:==========================
;10:*/
;11:static void CG_MachineGunEjectBrass( centity_t *cent ) {
line 16
;12:	localEntity_t	*le;
;13:	refEntity_t		*re;
;14:	vec3_t			velocity, xvelocity;
;15:	vec3_t			offset, xoffset;
;16:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 19
;17:	vec3_t			v[3];
;18:
;19:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $73
line 20
;20:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 23
;21:	}
;22:
;23:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 24
;24:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 26
;25:
;26:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 27
;27:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1109393408
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 28
;28:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 30
;29:
;30:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 32
;32:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 34
;33:
;34:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 35
;35:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 37
;36:
;37:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 39
;38:
;39:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 40
;40:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 41
;41:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 43
;42:
;43:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;44:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 45
;45:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 48
;47:
;48:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 50
;49:
;50:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $106
line 51
;51:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 52
;52:	}
LABELV $106
line 54
;53:
;54:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 55
;55:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 56
;56:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 57
;57:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 60
;60:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+148772+212
INDIRI4
ASGNI4
line 62
;61:
;62:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRLP4 92
INDIRF4
CNSTF4 1053609165
MULF4
ASGNF4
line 64
;63:
;64:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 66
;66:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 67
;67:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 68
;68:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 69
;69:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 70
;70:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 71
;71:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 73
;72:
;73:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 74
;74:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 75
;75:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 76
;76:}
LABELV $72
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 83
;77:
;78:/*
;79:==========================
;80:CG_ShotgunEjectBrass
;81:==========================
;82:*/
;83:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 91
;84:	localEntity_t	*le;
;85:	refEntity_t		*re;
;86:	vec3_t			velocity, xvelocity;
;87:	vec3_t			offset, xoffset;
;88:	vec3_t			v[3];
;89:	int				i;
;90:
;91:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $134
line 92
;92:		return;
ADDRGP4 $133
JUMPV
LABELV $134
line 95
;93:	}
;94:
;95:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $137
line 96
;96:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 98
;97:
;98:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 99
;99:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 101
;100:
;101:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1114636288
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 102
;102:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $141
line 103
;103:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 104
;104:		} else {
ADDRGP4 $142
JUMPV
LABELV $141
line 105
;105:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 106
;106:		}
LABELV $142
line 107
;107:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 109
;108:
;109:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 110
;110:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 111
;111:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 3
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 113
;112:
;113:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 114
;114:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 116
;115:
;116:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 118
;117:
;118:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 119
;119:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 120
;120:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 122
;121:
;122:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 123
;123:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 124
;124:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 125
;125:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 126
;126:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 127
;127:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $174
line 128
;128:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 129
;129:		}
LABELV $174
line 131
;130:
;131:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 132
;132:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 133
;133:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 134
;134:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 136
;135:
;136:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 137
;137:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+148772+216
INDIRI4
ASGNI4
line 138
;138:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 140
;139:
;140:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 141
;141:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 142
;142:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 143
;143:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 144
;144:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 145
;145:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 146
;146:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 147
;147:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 149
;148:
;149:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 150
;150:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 151
;151:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 152
;152:	}
LABELV $138
line 95
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $137
line 153
;153:}
LABELV $133
endproc CG_ShotgunEjectBrass 136 8
proc CG_NailgunEjectBrass 96 48
line 162
;154:
;155:
;156:#ifdef MISSIONPACK
;157:/*
;158:==========================
;159:CG_NailgunEjectBrass
;160:==========================
;161:*/
;162:static void CG_NailgunEjectBrass( centity_t *cent ) {
line 170
;163:	localEntity_t	*smoke;
;164:	vec3_t			origin;
;165:	vec3_t			v[3];
;166:	vec3_t			offset;
;167:	vec3_t			xoffset;
;168:	vec3_t			up;
;169:
;170:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 172
;171:
;172:	offset[0] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 173
;173:	offset[1] = -12;
ADDRLP4 0+4
CNSTF4 3242196992
ASGNF4
line 174
;174:	offset[2] = 24;
ADDRLP4 0+8
CNSTF4 1103101952
ASGNF4
line 176
;175:
;176:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 48
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 177
;177:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 48+4
ADDRLP4 0
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 178
;178:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 48+8
ADDRLP4 0
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 179
;179:	VectorAdd( cent->lerpOrigin, xoffset, origin );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 88
INDIRP4
CNSTI4 716
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+4
ADDRLP4 88
INDIRP4
CNSTI4 720
ADDP4
INDIRF4
ADDRLP4 48+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+8
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRF4
ADDRLP4 48+8
INDIRF4
ADDF4
ASGNF4
line 181
;180:
;181:	VectorSet( up, 0, 0, 64 );
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72+4
CNSTF4 0
ASGNF4
ADDRLP4 72+8
CNSTF4 1115684864
ASGNF4
line 183
;182:
;183:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1143930880
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148772+308
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 92
INDIRP4
ASGNP4
line 185
;184:	// use the optimized local entity add
;185:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 84
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 186
;186:}
LABELV $201
endproc CG_NailgunEjectBrass 96 48
export CG_RailTrail
proc CG_RailTrail 608 16
line 195
;187:#endif
;188:
;189:
;190:/*
;191:==========================
;192:CG_RailTrail
;193:==========================
;194:*/
;195:void CG_RailTrail( const clientInfo_t *ci, const vec3_t start, const vec3_t end ) {
line 207
;196:	vec3_t axis[36], move, move2, vec, temp;
;197:	float  len;
;198:	int    i, j, skip;
;199: 
;200:	localEntity_t *le;
;201:	refEntity_t   *re;
;202: 
;203:	#define RADIUS   4
;204:	#define ROTATION 1
;205:	#define SPACING  5
;206: 
;207:	le = CG_AllocLocalEntity();
ADDRLP4 504
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 504
INDIRP4
ASGNP4
line 208
;208:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 210
;209: 
;210:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 211
;211:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 212
;212:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 213
;213:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 215
;214: 
;215:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $237
line 216
;216:		re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $238
JUMPV
LABELV $237
line 218
;217:	else
;218:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $238
line 220
;219:
;220:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 221
;221:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+224
INDIRI4
ASGNI4
line 223
;222: 
;223:	VectorCopy(start, re->origin);
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 224
;224:	VectorCopy(end, re->oldorigin);
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 226
;225: 
;226:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 520
CNSTF4 1325400064
ASGNF4
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
LTF4 $244
ADDRLP4 512
ADDRLP4 516
INDIRF4
ADDRLP4 520
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $245
JUMPV
LABELV $244
ADDRLP4 512
ADDRLP4 516
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $245
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 512
INDIRU4
CVUU1 4
ASGNU1
line 227
;227:    re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 528
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 532
CNSTF4 1325400064
ASGNF4
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
LTF4 $247
ADDRLP4 524
ADDRLP4 528
INDIRF4
ADDRLP4 532
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $248
JUMPV
LABELV $247
ADDRLP4 524
ADDRLP4 528
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $248
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 524
INDIRU4
CVUU1 4
ASGNU1
line 228
;228:    re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 540
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 544
CNSTF4 1325400064
ASGNF4
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
LTF4 $250
ADDRLP4 536
ADDRLP4 540
INDIRF4
ADDRLP4 544
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $251
JUMPV
LABELV $250
ADDRLP4 536
ADDRLP4 540
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $251
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 536
INDIRU4
CVUU1 4
ASGNU1
line 229
;229:    re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 231
;230:
;231:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 232
;232:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 233
;233:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 234
;234:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 236
;235:
;236:	AxisClear( re->axis );
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 238
;237: 
;238:	if ( cg_oldRail.integer != 0 ) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $252
line 242
;239:		// nudge down a bit so it isn't exactly in center
;240:		//re->origin[2] -= 8;
;241:		//re->oldorigin[2] -= 8;
;242:		return;
ADDRGP4 $233
JUMPV
LABELV $252
line 246
;243:	}
;244:
;245:	//start[2] -= 4;
;246:	VectorCopy( start, move );
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 247
;247:	VectorSubtract( end, start, vec );
ADDRLP4 548
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 552
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 548
INDIRP4
INDIRF4
ADDRLP4 552
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 548
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 552
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 248
;248:	len = VectorNormalize( vec );
ADDRLP4 28
ARGP4
ADDRLP4 556
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 556
INDIRF4
ASGNF4
line 249
;249:	PerpendicularVector( temp, vec );
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 251
;250:
;251:	for ( i = 0 ; i < 36; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $257
line 252
;252:		RotatePointAroundVector( axis[i], vec, temp, i * 10 ); //banshee 2.4 was 10
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 253
;253:	}
LABELV $258
line 251
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $257
line 255
;254:
;255:	VectorMA( move, 20, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
line 256
;256:	VectorScale( vec, SPACING, vec );
ADDRLP4 28
ADDRLP4 28
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 258
;257:
;258:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 260
;259: 
;260:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 261
;261:	for ( i = 0; i < len; i += SPACING ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $274
JUMPV
LABELV $271
line 262
;262:		if ( i != skip ) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $275
line 263
;263:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 264
;264:			le = CG_AllocLocalEntity();
ADDRLP4 560
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 560
INDIRP4
ASGNP4
line 265
;265:			re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 266
;266:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 267
;267:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 268
;268:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 269
;269:			le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 270
;270:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 272
;271:
;272:			if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $279
line 273
;273:				re->u.intShaderTime = cg.time;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $279
line 275
;274:			else
;275:				re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $280
line 277
;276:
;277:			re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 278
;278:			re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 279
;279:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+220
INDIRI4
ASGNI4
line 281
;280:
;281:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 572
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 576
CNSTF4 1325400064
ASGNF4
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
LTF4 $286
ADDRLP4 568
ADDRLP4 572
INDIRF4
ADDRLP4 576
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $287
JUMPV
LABELV $286
ADDRLP4 568
ADDRLP4 572
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $287
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 568
INDIRU4
CVUU1 4
ASGNU1
line 282
;282:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 584
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 588
CNSTF4 1325400064
ASGNF4
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
LTF4 $289
ADDRLP4 580
ADDRLP4 584
INDIRF4
ADDRLP4 588
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $290
JUMPV
LABELV $289
ADDRLP4 580
ADDRLP4 584
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $290
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 580
INDIRU4
CVUU1 4
ASGNU1
line 283
;283:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 596
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 600
CNSTF4 1325400064
ASGNF4
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
LTF4 $292
ADDRLP4 592
ADDRLP4 596
INDIRF4
ADDRLP4 600
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $293
JUMPV
LABELV $292
ADDRLP4 592
ADDRLP4 596
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $293
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 592
INDIRU4
CVUU1 4
ASGNU1
line 284
;284:			re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 286
;285:
;286:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 287
;287:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 288
;288:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 289
;289:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 291
;290:
;291:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 292
;292:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 294
;293:
;294:			VectorCopy( move, move2 );
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 295
;295:			VectorMA( move2, RADIUS , axis[j], move2 );
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1082130432
MULF4
ADDF4
ASGNF4
line 296
;296:			VectorCopy( move2, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 298
;297:
;298:			le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 299
;299:			le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 300
;300:			le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 301
;301:		}
LABELV $275
line 303
;302:
;303:		VectorAdd( move, vec, move );
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 305
;304:
;305:		j = j + ROTATION < 36 ? j + ROTATION : (j + ROTATION) % 36;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $310
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 560
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $311
ADDRLP4 20
ADDRLP4 560
INDIRI4
ASGNI4
line 306
;306:	}
LABELV $272
line 261
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $274
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $271
line 307
;307:}
LABELV $233
endproc CG_RailTrail 608 16
proc CG_RocketTrail 84 48
line 315
;308:
;309:
;310:/*
;311:==========================
;312:CG_RocketTrail
;313:==========================
;314:*/
;315:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 325
;316:	int		step;
;317:	vec3_t	origin, lastPos;
;318:	int		t;
;319:	int		startTime, contents;
;320:	int		lastContents;
;321:	entityState_t	*es;
;322:	vec3_t	up;
;323:	localEntity_t	*smoke;
;324:
;325:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $313
line 326
;326:		return;
ADDRGP4 $312
JUMPV
LABELV $313
line 329
;327:	}
;328:
;329:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 330
;330:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 331
;331:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 333
;332:
;333:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 335
;334:
;335:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 336
;336:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 337
;337:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 339
;338:
;339:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 340
;340:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 343
;341:
;342:	// if object (e.g. grenade) is stationary, don't toss up smoke
;343:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $319
line 344
;344:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 345
;345:		return;
ADDRGP4 $312
JUMPV
LABELV $319
line 348
;346:	}
;347:
;348:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 349
;349:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 351
;350:
;351:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 353
;352:
;353:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $330
line 354
;354:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $312
line 355
;355:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 356
;356:		}
line 357
;357:		return;
ADDRGP4 $312
JUMPV
line 360
;358:	}
;359:
;360:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $327
line 361
;361:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 363
;362:
;363:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148772+308
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 372
;364:					  wi->trailRadius, 
;365:					  1.0f, 1.0f, 1.0f, 0.33f,
;366:					  wi->wiTrailTime, 
;367:					  t,
;368:					  0,
;369:					  0, 
;370:					  cgs.media.smokePuffShader );
;371:		// use the optimized local entity add
;372:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 373
;373:	}
LABELV $328
line 360
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $330
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $327
line 375
;374:
;375:}
LABELV $312
endproc CG_RocketTrail 84 48
proc CG_NailTrail 84 48
line 383
;376:
;377:#ifdef MISSIONPACK
;378:/*
;379:==========================
;380:CG_NailTrail
;381:==========================
;382:*/
;383:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 393
;384:	int		step;
;385:	vec3_t	origin, lastPos;
;386:	int		t;
;387:	int		startTime, contents;
;388:	int		lastContents;
;389:	entityState_t	*es;
;390:	vec3_t	up;
;391:	localEntity_t	*smoke;
;392:
;393:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $334
line 394
;394:		return;
ADDRGP4 $333
JUMPV
LABELV $334
line 397
;395:	}
;396:
;397:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 398
;398:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 399
;399:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 401
;400:
;401:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 403
;402:
;403:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 404
;404:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 405
;405:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 407
;406:
;407:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 408
;408:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 411
;409:
;410:	// if object (e.g. grenade) is stationary, don't toss up smoke
;411:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $340
line 412
;412:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 413
;413:		return;
ADDRGP4 $333
JUMPV
LABELV $340
line 416
;414:	}
;415:
;416:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 417
;417:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 419
;418:
;419:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 421
;420:
;421:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $351
line 422
;422:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $333
line 423
;423:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 424
;424:		}
line 425
;425:		return;
ADDRGP4 $333
JUMPV
line 428
;426:	}
;427:
;428:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $348
line 429
;429:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 431
;430:
;431:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148772+336
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 440
;432:					  wi->trailRadius, 
;433:					  1, 1, 1, 0.33f,
;434:					  wi->wiTrailTime, 
;435:					  t,
;436:					  0,
;437:					  0, 
;438:					  cgs.media.nailPuffShader );
;439:		// use the optimized local entity add
;440:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 441
;441:	}
LABELV $349
line 428
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $351
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $348
line 443
;442:
;443:}
LABELV $333
endproc CG_NailTrail 84 48
proc CG_PlasmaTrail 184 12
line 451
;444:#endif
;445:
;446:/*
;447:==========================
;448:CG_PlasmaTrail
;449:==========================
;450:*/
;451:static void CG_PlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 459
;452:	localEntity_t	*le;
;453:	refEntity_t		*re;
;454:	entityState_t	*es;
;455:	vec3_t			velocity, xvelocity, origin;
;456:	vec3_t			offset, xoffset;
;457:	vec3_t			v[3];
;458:
;459:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 461
;460:
;461:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
NEI4 $359
ADDRGP4 cg_oldPlasma+12
INDIRI4
CNSTI4 0
EQI4 $355
LABELV $359
line 462
;462:		return;
ADDRGP4 $354
JUMPV
LABELV $355
line 465
;463:	}
;464:
;465:	es = &cent->currentState;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
line 467
;466:
;467:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 108
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 469
;468:
;469:	le = CG_AllocLocalEntity();
ADDRLP4 112
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 470
;470:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 472
;471:
;472:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1123024896
MULF4
SUBF4
ASGNF4
line 473
;473:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1117782016
MULF4
SUBF4
ASGNF4
line 474
;474:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1128792064
MULF4
SUBF4
ASGNF4
line 476
;475:
;476:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 477
;477:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 478
;478:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 479
;479:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 481
;480:
;481:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 482
;482:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 484
;483:
;484:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 485
;485:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 487
;486:
;487:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 489
;488:
;489:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 490
;490:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 491
;491:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 493
;492:
;493:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 494
;494:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 495
;495:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 497
;496:
;497:	VectorAdd( origin, xoffset, re->origin );
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 498
;498:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 500
;499:
;500:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 132
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $391
line 501
;501:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 502
;502:	}
LABELV $391
line 504
;503:
;504:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 505
;505:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 506
;506:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 507
;507:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 509
;508:
;509:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 511
;510:	
;511:	if ( intShaderTime )
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $415
line 512
;512:		re->u.intShaderTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $416
JUMPV
LABELV $415
line 514
;513:	else
;514:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $416
line 516
;515:
;516:    re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 517
;517:    re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 518
;518:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+220
INDIRI4
ASGNI4
line 519
;519:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 521
;520:
;521:    re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 140
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 144
CNSTF4 1325400064
ASGNF4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
LTF4 $422
ADDRLP4 136
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $423
JUMPV
LABELV $422
ADDRLP4 136
ADDRLP4 140
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $423
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU4
CVUU1 4
ASGNU1
line 522
;522:    re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $425
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $426
JUMPV
LABELV $425
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $426
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 523
;523:    re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 164
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 168
CNSTF4 1325400064
ASGNF4
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
LTF4 $428
ADDRLP4 160
ADDRLP4 164
INDIRF4
ADDRLP4 168
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $429
JUMPV
LABELV $428
ADDRLP4 160
ADDRLP4 164
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $429
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 160
INDIRU4
CVUU1 4
ASGNU1
line 524
;524:    re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 526
;525:
;526:    le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 527
;527:    le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 528
;528:    le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 529
;529:    le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 531
;530:
;531:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 532
;532:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 533
;533:	le->angles.trBase[0] = rand()&31;
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 172
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 534
;534:	le->angles.trBase[1] = rand()&31;
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 176
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 535
;535:	le->angles.trBase[2] = rand()&31;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 180
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 536
;536:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 537
;537:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 538
;538:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 539
;539:}
LABELV $354
endproc CG_PlasmaTrail 184 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 547
;540:
;541:
;542:/*
;543:==========================
;544:CG_GrappleTrail
;545:==========================
;546:*/
;547:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 553
;548:	vec3_t	origin;
;549:	entityState_t	*es;
;550:	vec3_t			forward, up;
;551:	refEntity_t		beam;
;552:
;553:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 555
;554:
;555:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 556
;556:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 558
;557:
;558:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 560
;559:	//FIXME adjust for muzzle position
;560:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+716
ADDP4
INDIRB
ASGNB 12
line 561
;561:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 562
;562:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+728
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 563
;563:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 140
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 140+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 140+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
line 564
;564:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 566
;565:
;566:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $452
line 567
;567:		return; // Don't draw if close
ADDRGP4 $431
JUMPV
LABELV $452
line 569
;568:
;569:	beam.reType = RT_RAIL_CORE;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 570
;570:	beam.customShader = cgs.media.grappleShader;
ADDRLP4 0+112
ADDRGP4 cgs+148772+332
INDIRI4
ASGNI4
line 572
;571:
;572:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 573
;573:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 574
;574:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 575
;575:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 576
;576:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 577
;577:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 578
;578:}
LABELV $431
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 0 8
line 585
;579:
;580:/*
;581:==========================
;582:CG_GrenadeTrail
;583:==========================
;584:*/
;585:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 586
;586:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 587
;587:}
LABELV $467
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 344 12
line 597
;588:
;589:
;590:/*
;591:=================
;592:CG_RegisterWeapon
;593:
;594:The server says this item is used on this level
;595:=================
;596:*/
;597:void CG_RegisterWeapon( int weaponNum ) {
line 604
;598:	weaponInfo_t	*weaponInfo;
;599:	gitem_t			*item, *ammo;
;600:	char			path[MAX_QPATH];
;601:	vec3_t			mins, maxs;
;602:	int				i;
;603:
;604:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 606
;605:
;606:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $469
line 607
;607:		return;
ADDRGP4 $468
JUMPV
LABELV $469
line 610
;608:	}
;609:
;610:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $471
line 611
;611:		return;
ADDRGP4 $468
JUMPV
LABELV $471
line 614
;612:	}
;613:
;614:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTU4 136
ARGU4
ADDRGP4 memset
CALLP4
pop
line 615
;615:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 617
;616:
;617:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $476
JUMPV
LABELV $473
line 618
;618:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $478
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $478
line 619
;619:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 620
;620:			break;
ADDRGP4 $475
JUMPV
LABELV $478
line 622
;621:		}
;622:	}
LABELV $474
line 617
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $476
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $473
LABELV $475
line 623
;623:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $480
line 624
;624:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $482
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 625
;625:	}
LABELV $480
line 626
;626:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 629
;627:
;628:	// load cmodel before model so filecache works
;629:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 632
;630:
;631:	// calc midpoint for rotation
;632:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 633
;633:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $483
line 634
;634:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 635
;635:	}
LABELV $484
line 633
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $483
line 637
;636:
;637:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 638
;638:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 640
;639:
;640:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $490
JUMPV
LABELV $487
line 641
;641:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $492
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $492
line 642
;642:			break;
ADDRGP4 $489
JUMPV
LABELV $492
line 644
;643:		}
;644:	}
LABELV $488
line 640
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $490
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $487
LABELV $489
line 645
;645:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $494
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $494
line 646
;646:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 647
;647:	}
LABELV $494
line 649
;648:
;649:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 650
;650:	Q_strcat( path, sizeof(path), "_flash.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $496
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 651
;651:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 653
;652:
;653:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 654
;654:	Q_strcat( path, sizeof(path), "_barrel.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $497
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 655
;655:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 657
;656:
;657:	COM_StripExtension( item->world_model[0], path, sizeof(path) );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 658
;658:	Q_strcat( path, sizeof(path), "_hand.md3" );
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $498
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 659
;659:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 661
;660:
;661:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $499
line 662
;662:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $501
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 663
;663:	}
LABELV $499
line 665
;664:
;665:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 667
;666:
;667:	switch ( weaponNum ) {
ADDRLP4 132
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 1
LTI4 $502
ADDRLP4 132
INDIRI4
CNSTI4 13
GTI4 $502
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $598-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $598
address $504
address $541
address $548
address $563
address $550
address $507
address $580
address $571
address $591
address $526
address $568
address $557
address $532
code
LABELV $504
line 669
;668:	case WP_GAUNTLET:
;669:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 670
;670:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $505
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 136
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 671
;671:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $506
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 672
;672:		break;
ADDRGP4 $503
JUMPV
LABELV $507
line 675
;673:
;674:	case WP_LIGHTNING:
;675:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 676
;676:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $508
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 677
;677:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $509
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 679
;678:
;679:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $510
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 680
;680:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $513
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+228
ADDRLP4 156
INDIRI4
ASGNI4
line 681
;681:		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
ADDRGP4 $516
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+148772+488
ADDRLP4 160
INDIRI4
ASGNI4
line 682
;682:		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $519
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 164
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148772+756
ADDRLP4 164
INDIRI4
ASGNI4
line 683
;683:		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $522
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148772+760
ADDRLP4 168
INDIRI4
ASGNI4
line 684
;684:		cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $525
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+148772+764
ADDRLP4 172
INDIRI4
ASGNI4
line 686
;685:
;686:		break;
ADDRGP4 $503
JUMPV
LABELV $526
line 689
;687:
;688:	case WP_GRAPPLING_HOOK:		
;689:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 690
;690:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weapons2/grapple2/grapple_grip.md3" );
ADDRGP4 $527
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 691
;691:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 692
;692:		weaponInfo->missileDlight = 0;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 0
ASGNF4
line 693
;693:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 694
;694:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 695
;695:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 696
;696:		cgs.media.grappleShader = trap_R_RegisterShader( "grappleRope");
ADDRGP4 $530
ARGP4
ADDRLP4 180
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+332
ADDRLP4 180
INDIRI4
ASGNI4
line 699
;697:		//weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grapple/contact.wav", qfalse );
;698:		//weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/grapple/firingsound.wav", qfalse);
;699:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/grapple/grappull.wav", qfalse );
ADDRGP4 $531
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 700
;700:		weaponInfo->loopFireSound = qtrue;		
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 1
ASGNI4
line 702
;701:                //cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
;702:		break;
ADDRGP4 $503
JUMPV
LABELV $532
line 706
;703:
;704:#ifdef MISSIONPACK
;705:	case WP_CHAINGUN:
;706:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
ADDRGP4 $533
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 707
;707:		weaponInfo->loopFireSound = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 1
ASGNI4
line 708
;708:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 709
;709:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
ADDRGP4 $534
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 710
;710:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
ADDRGP4 $535
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 711
;711:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
ADDRGP4 $536
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 712
;712:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
ADDRGP4 $537
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 713
;713:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 714
;714:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $540
ARGP4
ADDRLP4 208
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+500
ADDRLP4 208
INDIRI4
ASGNI4
line 715
;715:		break;
ADDRGP4 $503
JUMPV
LABELV $541
line 719
;716:#endif
;717:
;718:	case WP_MACHINEGUN:
;719:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 720
;720:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $542
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 721
;721:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 722
;722:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $544
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 723
;723:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $545
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 724
;724:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 725
;725:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $540
ARGP4
ADDRLP4 228
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+500
ADDRLP4 228
INDIRI4
ASGNI4
line 726
;726:		break;
ADDRGP4 $503
JUMPV
LABELV $548
line 729
;727:
;728:	case WP_SHOTGUN:
;729:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 730
;730:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $549
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 731
;731:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 732
;732:		break;
ADDRGP4 $503
JUMPV
LABELV $550
line 735
;733:
;734:	case WP_ROCKET_LAUNCHER:
;735:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $551
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 736
;736:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $552
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 737
;737:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 738
;738:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 739
;739:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 740
;740:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 742
;741:		
;742:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 743
;743:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 745
;744:
;745:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $553
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 746
;746:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $556
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+504
ADDRLP4 248
INDIRI4
ASGNI4
line 747
;747:		break;
ADDRGP4 $503
JUMPV
LABELV $557
line 751
;748:
;749:#ifdef MISSIONPACK
;750:	case WP_PROX_LAUNCHER:
;751:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
ADDRGP4 $558
ARGP4
ADDRLP4 252
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 752
;752:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 753
;753:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 754
;754:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 755
;755:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 756
;756:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
ADDRGP4 $559
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 757
;757:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $562
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+508
ADDRLP4 260
INDIRI4
ASGNI4
line 758
;758:		break;
ADDRGP4 $503
JUMPV
LABELV $563
line 762
;759:#endif
;760:
;761:	case WP_GRENADE_LAUNCHER:
;762:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $564
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 763
;763:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 764
;764:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 765
;765:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 766
;766:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 767
;767:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $565
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 768
;768:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $562
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+508
ADDRLP4 272
INDIRI4
ASGNI4
line 769
;769:		break;
ADDRGP4 $503
JUMPV
LABELV $568
line 773
;770:
;771:#ifdef MISSIONPACK
;772:	case WP_NAILGUN:
;773:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_NailgunEjectBrass
ASGNP4
line 774
;774:		weaponInfo->missileTrailFunc = CG_NailTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_NailTrail
ASGNP4
line 776
;775://		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;776:		weaponInfo->trailRadius = 16;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1098907648
ASGNF4
line 777
;777:		weaponInfo->wiTrailTime = 250;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1132068864
ASGNF4
line 778
;778:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
ADDRGP4 $569
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 779
;779:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 780
;780:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
ADDRGP4 $570
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 781
;781:		break;
ADDRGP4 $503
JUMPV
LABELV $571
line 786
;782:#endif
;783:
;784:	case WP_PLASMAGUN:
;785://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;786:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 787
;787:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $572
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 284
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 790
;788:
;789:		// plasmagun dlight
;790:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 791
;791:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 0.2f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 793
;792:
;793:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 794
;794:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $573
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 795
;795:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $576
ARGP4
ADDRLP4 292
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+496
ADDRLP4 292
INDIRI4
ASGNI4
line 796
;796:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $579
ARGP4
ADDRLP4 296
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+220
ADDRLP4 296
INDIRI4
ASGNI4
line 797
;797:		break;
ADDRGP4 $503
JUMPV
LABELV $580
line 800
;798:
;799:	case WP_RAILGUN:
;800:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $581
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 300
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 801
;801:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 802
;802:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $582
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 803
;803:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $585
ARGP4
ADDRLP4 308
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+492
ADDRLP4 308
INDIRI4
ASGNI4
line 804
;804:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $579
ARGP4
ADDRLP4 312
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+220
ADDRLP4 312
INDIRI4
ASGNI4
line 805
;805:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $590
ARGP4
ADDRLP4 316
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+224
ADDRLP4 316
INDIRI4
ASGNI4
line 806
;806:		break;
ADDRGP4 $503
JUMPV
LABELV $591
line 809
;807:
;808:	case WP_BFG:
;809:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $592
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 320
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 320
INDIRI4
ASGNI4
line 812
;810:
;811:		// bfg dlight
;812:		weaponInfo->missileDlight = MISSILE_GLOW_RADIUS;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 813
;813:		MAKERGB( weaponInfo->missileDlightColor, 0.2f, 1.0f, 0.2f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
line 815
;814:
;815:		MAKERGB( weaponInfo->flashDlightColor, 1.0f, 0.7f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 816
;816:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $593
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 324
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 324
INDIRI4
ASGNI4
line 817
;817:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $596
ARGP4
ADDRLP4 328
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+148772+512
ADDRLP4 328
INDIRI4
ASGNI4
line 818
;818:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
ADDRGP4 $597
ARGP4
ADDRLP4 332
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 332
INDIRI4
ASGNI4
line 819
;819:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $552
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 336
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 336
INDIRI4
ASGNI4
line 820
;820:		break;
ADDRGP4 $503
JUMPV
LABELV $502
line 823
;821:
;822:	 default:
;823:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 824
;824:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $553
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 340
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 340
INDIRI4
ASGNI4
line 825
;825:		break;
LABELV $503
line 827
;826:	}
;827:}
LABELV $468
endproc CG_RegisterWeapon 344 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 836
;828:
;829:/*
;830:=================
;831:CG_RegisterItemVisuals
;832:
;833:The server says this item is used on this level
;834:=================
;835:*/
;836:void CG_RegisterItemVisuals( int itemNum ) {
line 840
;837:	itemInfo_t		*itemInfo;
;838:	gitem_t			*item;
;839:
;840:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $603
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $601
LABELV $603
line 841
;841:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $604
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 842
;842:	}
LABELV $601
line 844
;843:
;844:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 28
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 845
;845:	if ( itemInfo->registered ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $605
line 846
;846:		return;
ADDRGP4 $600
JUMPV
LABELV $605
line 849
;847:	}
;848:
;849:	item = &bg_itemlist[ itemNum ];
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 851
;850:
;851:	memset( itemInfo, 0, sizeof( *itemInfo ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTU4 28
ARGU4
ADDRGP4 memset
CALLP4
pop
line 852
;852:	itemInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 854
;853:
;854:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 856
;855:
;856:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 859
;857:
;858:	// try to register depth-fragment shaders
;859:	if ( cg.clientFrame == 0 && cg.skipDFshaders ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $607
ADDRGP4 cg+157036
INDIRI4
CNSTI4 0
EQI4 $607
line 860
;860:		itemInfo->icon_df = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 861
;861:	} else {
ADDRGP4 $608
JUMPV
LABELV $607
line 862
;862:		itemInfo->icon_df = trap_R_RegisterShader( va( "%s_df", item->icon ) );
ADDRGP4 $610
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 863
;863:	}
LABELV $608
line 865
;864:
;865:	if ( !itemInfo->icon_df ) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
NEI4 $611
line 866
;866:		itemInfo->icon_df = itemInfo->icon;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 867
;867:		if ( cg.clientFrame == 0 ) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $613
line 868
;868:			cg.skipDFshaders = qtrue; // skip all further tries to avoid shader debug mesages in 1.32c during map loading
ADDRGP4 cg+157036
CNSTI4 1
ASGNI4
line 869
;869:		} else {
ADDRGP4 $612
JUMPV
LABELV $613
line 870
;870:			cg.skipDFshaders = qfalse;
ADDRGP4 cg+157036
CNSTI4 0
ASGNI4
line 871
;871:		}
line 872
;872:	} else {
ADDRGP4 $612
JUMPV
LABELV $611
line 873
;873:		cg.skipDFshaders = qfalse;
ADDRGP4 cg+157036
CNSTI4 0
ASGNI4
line 874
;874:	}
LABELV $612
line 876
;875:
;876:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $618
line 877
;877:		CG_RegisterWeapon( item->giTag );
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 878
;878:	}
LABELV $618
line 883
;879:
;880:	//
;881:	// powerups have an accompanying ring or sphere
;882:	//
;883:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $624
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 4
EQI4 $624
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
EQI4 $624
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $620
LABELV $624
line 884
;884:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 885
;885:		if ( item->world_model[1] ) {
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $625
line 886
;886:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 887
;887:		}
LABELV $625
line 888
;888:	}
LABELV $620
line 889
;889:}
LABELV $600
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 906
;890:
;891:
;892:/*
;893:========================================================================================
;894:
;895:VIEW WEAPON
;896:
;897:========================================================================================
;898:*/
;899:
;900:/*
;901:=================
;902:CG_MapTorsoToWeaponFrame
;903:
;904:=================
;905:*/
;906:static int CG_MapTorsoToWeaponFrame( const clientInfo_t *ci, int frame ) {
line 909
;907:
;908:	// change weapon
;909:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
LTI4 $628
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $628
line 910
;910:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 911
;911:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $627
JUMPV
LABELV $628
line 915
;912:	}
;913:
;914:	// stand attack
;915:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
LTI4 $630
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $630
line 916
;916:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 917
;917:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $627
JUMPV
LABELV $630
line 921
;918:	}
;919:
;920:	// stand attack 2
;921:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
LTI4 $632
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $632
line 922
;922:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 923
;923:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $627
JUMPV
LABELV $632
line 926
;924:	}
;925:	
;926:	return 0;
CNSTI4 0
RETI4
LABELV $627
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 935
;927:}
;928:
;929:
;930:/*
;931:==============
;932:CG_CalculateWeaponPosition
;933:==============
;934:*/
;935:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 940
;936:	float	scale;
;937:	int		delta;
;938:	float	fracsin;
;939:
;940:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 941
;941:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+109424
INDIRB
ASGNB 12
line 944
;942:
;943:	// on odd legs, invert some angles
;944:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+125892
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $638
line 945
;945:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125896
INDIRF4
NEGF4
ASGNF4
line 946
;946:	} else {
ADDRGP4 $639
JUMPV
LABELV $638
line 947
;947:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+125896
INDIRF4
ASGNF4
line 948
;948:	}
LABELV $639
line 951
;949:
;950:	// gun angles from bobbing
;951:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125888
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 952
;952:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+125888
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 953
;953:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+125896
INDIRF4
ADDRGP4 cg+125888
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 956
;954:
;955:	// drop the weapon when landing
;956:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108952
INDIRI4
SUBI4
ASGNI4
line 957
;957:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $649
line 958
;958:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1004172302
MULF4
ADDF4
ASGNF4
line 959
;959:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $650
JUMPV
LABELV $649
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $652
line 960
;960:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+108948
INDIRF4
CNSTF4 1048576000
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 995783694
MULF4
ADDF4
ASGNF4
line 962
;961:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;962:	}
LABELV $652
LABELV $650
line 975
;963:
;964:#if 0
;965:	// drop the weapon when stair climbing
;966:	delta = cg.time - cg.stepTime;
;967:	if ( delta < STEP_TIME/2 ) {
;968:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;969:	} else if ( delta < STEP_TIME ) {
;970:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;971:	}
;972:#endif
;973:
;974:	// idle drift
;975:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+125896
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 976
;976:	fracsin = sin( ( cg.time % TMOD_1000 ) * 0.001 );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 5730265
MODI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 977
;977:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 978
;978:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 979
;979:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 980
;980:}
LABELV $634
endproc CG_CalculateWeaponPosition 40 4
proc CG_LightningBolt 280 28
line 994
;981:
;982:
;983:/*
;984:===============
;985:CG_LightningBolt
;986:
;987:Origin will be the exact tag point, which is slightly
;988:different than the muzzle point used for determining hits.
;989:The cent should be the non-predicted cent if it is from the player,
;990:so the endpoint will reflect the simulated strike (lagging the predicted
;991:angle)
;992:===============
;993:*/
;994:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
line 1002
;995:	trace_t  trace;
;996:	refEntity_t  beam;
;997:	vec3_t   forward;
;998:	vec3_t   muzzlePoint, endPoint;
;999:	int      anim;
;1000:	qboolean directView;
;1001:
;1002:	if (cent->currentState.weapon != WP_LIGHTNING) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $658
line 1003
;1003:		return;
ADDRGP4 $657
JUMPV
LABELV $658
line 1006
;1004:	}
;1005:
;1006:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1008
;1007:
;1008:	if ( !cg.renderingThirdPerson && cent->currentState.number == cg.predictedPlayerState.clientNum ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $660
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $660
line 1009
;1009:		directView = qtrue;
ADDRLP4 232
CNSTI4 1
ASGNI4
line 1010
;1010:		VectorCopy( cg.refdef.vieworg, muzzlePoint );
ADDRLP4 140
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1011
;1011:	} else {
ADDRGP4 $661
JUMPV
LABELV $660
line 1012
;1012:		directView = qfalse;
ADDRLP4 232
CNSTI4 0
ASGNI4
line 1013
;1013:		VectorCopy( cent->lerpOrigin, muzzlePoint );
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRB
ASGNB 12
line 1014
;1014:		anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 236
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1015
;1015:		if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 240
ADDRLP4 236
INDIRI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 13
EQI4 $669
ADDRLP4 240
INDIRI4
CNSTI4 23
NEI4 $667
LABELV $669
line 1016
;1016:			muzzlePoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 1017
;1017:		} else {
ADDRGP4 $668
JUMPV
LABELV $667
line 1018
;1018:			muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1019
;1019:		}
LABELV $668
line 1020
;1020:	}
LABELV $661
line 1023
;1021:
;1022:	// CPMA  "true" lightning
;1023:	if ( directView && cg_trueLightning.value ) {
ADDRLP4 232
INDIRI4
CNSTI4 0
EQI4 $672
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $672
line 1028
;1024:		//vec3_t	viewangles;
;1025:		vec3_t angle;
;1026:		int i;
;1027:
;1028:		for (i = 0; i < 3; i++) {
ADDRLP4 240
CNSTI4 0
ASGNI4
LABELV $675
line 1029
;1029:			float a = cent->lerpAngles[i] - cg.refdefViewAngles[i];
ADDRLP4 256
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ADDP4
INDIRF4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1030
;1030:			if (a > 180) {
ADDRLP4 256
INDIRF4
CNSTF4 1127481344
LEF4 $680
line 1031
;1031:				a -= 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1032
;1032:			}
LABELV $680
line 1033
;1033:			if (a < -180) {
ADDRLP4 256
INDIRF4
CNSTF4 3274964992
GEF4 $682
line 1034
;1034:				a += 360;
ADDRLP4 256
ADDRLP4 256
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1035
;1035:			}
LABELV $682
line 1037
;1036:
;1037:			angle[i] = cg.refdefViewAngles[i] + a * (1.0 - cg_trueLightning.value);
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+109424
ADDP4
INDIRF4
ADDRLP4 256
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1038
;1038:			if (angle[i] < 0) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 0
GEF4 $686
line 1039
;1039:				angle[i] += 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1040
;1040:			}
LABELV $686
line 1041
;1041:			if (angle[i] > 360) {
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $688
line 1042
;1042:				angle[i] -= 360;
ADDRLP4 268
ADDRLP4 240
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 244
ADDP4
ASGNP4
ADDRLP4 268
INDIRP4
ADDRLP4 268
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1043
;1043:			}
LABELV $688
line 1044
;1044:		}
LABELV $676
line 1028
ADDRLP4 240
ADDRLP4 240
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 3
LTI4 $675
line 1046
;1045:
;1046:		AngleVectors(angle, forward, NULL, NULL );
ADDRLP4 244
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1048
;1047:
;1048:	} else {
ADDRGP4 $673
JUMPV
LABELV $672
line 1050
;1049:		// !CPMA
;1050:		AngleVectors( cent->lerpAngles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1051
;1051:	}
LABELV $673
line 1053
;1052:
;1053:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 140
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1056
;1054:
;1055:	// project forward by the lightning range
;1056:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
ADDRLP4 220
ADDRLP4 140
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
ADDRLP4 220+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1145044992
MULF4
ADDF4
ASGNF4
line 1059
;1057:
;1058:	// see if it hit a wall
;1059:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 164
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 240
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 220
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1063
;1060:		cent->currentState.number, MASK_SHOT );
;1061:
;1062:	// this is the endpoint
;1063:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 164+12
INDIRB
ASGNB 12
line 1067
;1064:
;1065:	// use the provided origin, even though it may be slightly
;1066:	// different than the muzzle origin
;1067:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1069
;1068:
;1069:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1070
;1070:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+148772+228
INDIRI4
ASGNI4
line 1071
;1071:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1074
;1072:
;1073:	// add the impact flare if it hit something
;1074:	if ( trace.fraction < 1.0 ) {
ADDRLP4 164+8
INDIRF4
CNSTF4 1065353216
GEF4 $708
line 1078
;1075:		vec3_t	angles;
;1076:		vec3_t	dir;
;1077:
;1078:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 244
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 244+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1079
;1079:		VectorNormalize( dir );
ADDRLP4 244
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1081
;1080:
;1081:		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1082
;1082:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+148772+488
INDIRI4
ASGNI4
line 1084
;1083:
;1084:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 164+12
INDIRF4
ADDRLP4 244
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 164+12+4
INDIRF4
ADDRLP4 244+4
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 164+12+8
INDIRF4
ADDRLP4 244+8
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
line 1087
;1085:
;1086:		// make a random orientation
;1087:		angles[0] = rand() % 360;
ADDRLP4 268
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256
ADDRLP4 268
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1088
;1088:		angles[1] = rand() % 360;
ADDRLP4 272
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+4
ADDRLP4 272
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1089
;1089:		angles[2] = rand() % 360;
ADDRLP4 276
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 256+8
ADDRLP4 276
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1090
;1090:		AnglesToAxis( angles, beam.axis );
ADDRLP4 256
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1091
;1091:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1092
;1092:	}
LABELV $708
line 1093
;1093:}
LABELV $657
endproc CG_LightningBolt 280 28
proc CG_SpawnRailTrail 4 12
line 1166
;1094:/*
;1095:
;1096:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1097:	trace_t		trace;
;1098:	refEntity_t		beam;
;1099:	vec3_t			forward;
;1100:	vec3_t			muzzlePoint, endPoint;
;1101:
;1102:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1103:		return;
;1104:	}
;1105:
;1106:	memset( &beam, 0, sizeof( beam ) );
;1107:
;1108:	// find muzzle point for this frame
;1109:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1110:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1111:
;1112:	// FIXME: crouch
;1113:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1114:
;1115:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1116:
;1117:	// project forward by the lightning range
;1118:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1119:
;1120:	// see if it hit a wall
;1121:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
;1122:		cent->currentState.number, MASK_SHOT );
;1123:
;1124:	// this is the endpoint
;1125:	VectorCopy( trace.endpos, beam.oldorigin );
;1126:
;1127:	// use the provided origin, even though it may be slightly
;1128:	// different than the muzzle origin
;1129:	VectorCopy( origin, beam.origin );
;1130:
;1131:	beam.reType = RT_LIGHTNING;
;1132:	beam.customShader = cgs.media.lightningShader;
;1133:	trap_R_AddRefEntityToScene( &beam );
;1134:
;1135:	// add the impact flare if it hit something
;1136:	if ( trace.fraction < 1.0 ) {
;1137:		vec3_t	angles;
;1138:		vec3_t	dir;
;1139:
;1140:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1141:		VectorNormalize( dir );
;1142:
;1143:		memset( &beam, 0, sizeof( beam ) );
;1144:		beam.hModel = cgs.media.lightningExplosionModel;
;1145:
;1146:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1147:
;1148:		// make a random orientation
;1149:		angles[0] = rand() % 360;
;1150:		angles[1] = rand() % 360;
;1151:		angles[2] = rand() % 360;
;1152:		AnglesToAxis( angles, beam.axis );
;1153:		trap_R_AddRefEntityToScene( &beam );
;1154:	}
;1155:}
;1156:*/
;1157:
;1158:/*
;1159:===============
;1160:CG_SpawnRailTrail
;1161:
;1162:Origin will be the exact tag point, which is slightly
;1163:different than the muzzle point used for determining hits.
;1164:===============
;1165:*/
;1166:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1169
;1167:	clientInfo_t	*ci;
;1168:
;1169:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $742
line 1170
;1170:		return;
ADDRGP4 $741
JUMPV
LABELV $742
line 1172
;1171:	}
;1172:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $744
line 1173
;1173:		return;
ADDRGP4 $741
JUMPV
LABELV $744
line 1175
;1174:	}
;1175:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 1
ASGNI4
line 1176
;1176:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1177
;1177:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1178
;1178:}
LABELV $741
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 40 16
line 1188
;1179:
;1180:
;1181:/*
;1182:======================
;1183:CG_MachinegunSpinAngle
;1184:======================
;1185:*/
;1186:#define		SPIN_SPEED	0.9
;1187:#define		COAST_TIME	1000
;1188:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1193
;1189:	int		delta;
;1190:	float	angle;
;1191:	float	speed;
;1192:
;1193:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1194
;1194:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
EQI4 $749
line 1195
;1195:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1196
;1196:	} else {
ADDRGP4 $750
JUMPV
LABELV $749
line 1197
;1197:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $751
line 1198
;1198:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1199
;1199:		}
LABELV $751
line 1201
;1200:
;1201:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1202
;1202:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1203
;1203:	}
LABELV $750
line 1205
;1204:
;1205:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $756
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $757
JUMPV
LABELV $756
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $757
ADDRLP4 16
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $753
line 1206
;1206:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1207
;1207:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1208
;1208:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $760
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $761
JUMPV
LABELV $760
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $761
ADDRLP4 28
INDIRP4
CNSTI4 644
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1210
;1209:#ifdef MISSIONPACK
;1210:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 13
NEI4 $762
ADDRLP4 32
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
NEI4 $762
line 1211
;1211:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
ADDRGP4 $764
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1212
;1212:		}
LABELV $762
line 1214
;1213:#endif
;1214:	}
LABELV $753
line 1216
;1215:
;1216:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $747
endproc CG_MachinegunSpinAngle 40 16
proc CG_AddWeaponWithPowerups 0 4
line 1225
;1217:}
;1218:
;1219:
;1220:/*
;1221:========================
;1222:CG_AddWeaponWithPowerups
;1223:========================
;1224:*/
;1225:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
line 1227
;1226:	// add powerup effects
;1227:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $766
line 1228
;1228:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+448
INDIRI4
ASGNI4
line 1229
;1229:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1230
;1230:	} else {
ADDRGP4 $767
JUMPV
LABELV $766
line 1231
;1231:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1233
;1232:
;1233:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $770
line 1234
;1234:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+460
INDIRI4
ASGNI4
line 1235
;1235:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1236
;1236:		}
LABELV $770
line 1237
;1237:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $774
line 1238
;1238:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148772+444
INDIRI4
ASGNI4
line 1239
;1239:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1240
;1240:		}
LABELV $774
line 1241
;1241:	}
LABELV $767
line 1242
;1242:}
LABELV $765
endproc CG_AddWeaponWithPowerups 0 4
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 580 28
line 1254
;1243:
;1244:
;1245:/*
;1246:=============
;1247:CG_AddPlayerWeapon
;1248:
;1249:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1250:The main player will have this called for BOTH cases, so effects like light and
;1251:sound should only be done on the world model case.
;1252:=============
;1253:*/
;1254:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team ) {
line 1265
;1255:	refEntity_t	gun;
;1256:	refEntity_t	barrel;
;1257:	refEntity_t	flash;
;1258:	vec3_t		angles;
;1259:	weapon_t	weaponNum;
;1260:	weaponInfo_t	*weapon;
;1261:	centity_t	*nonPredictedCent;
;1262://	int	col;
;1263:	const	clientInfo_t	*ci;
;1264:
;1265:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 300
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1266
;1266:	weaponNum = cent->currentState.weapon;
ADDRLP4 284
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1268
;1267:
;1268:	CG_RegisterWeapon( weaponNum );
ADDRLP4 284
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1269
;1269:	weapon = &cg_weapons[weaponNum];
ADDRLP4 280
ADDRLP4 284
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1272
;1270:
;1271:	// add the weapon
;1272:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1273
;1273:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1274
;1274:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1275
;1275:	gun.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1278
;1276:
;1277:	// set custom shading for railgun refire rate
;1278:	if ( ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $783
line 1279
;1279:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN 
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
NEI4 $785
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $785
line 1280
;1280:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1282
;1281:			float	f;
;1282:			f = (1.0f - ((float)cg.predictedPlayerState.weaponTime / 1500.0f) );
ADDRLP4 448
CNSTF4 1065353216
ADDRGP4 cg+107636+44
INDIRI4
CVIF4 4
CNSTF4 976143166
MULF4
SUBF4
ASGNF4
line 1283
;1283:			gun.shaderRGBA[0] = 255 * ci->color1[0] * f;
ADDRLP4 456
ADDRLP4 300
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 460
CNSTF4 1325400064
ASGNF4
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
LTF4 $795
ADDRLP4 452
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $796
JUMPV
LABELV $795
ADDRLP4 452
ADDRLP4 456
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $796
ADDRLP4 0+116
ADDRLP4 452
INDIRU4
CVUU1 4
ASGNU1
line 1284
;1284:			gun.shaderRGBA[1] = 255 * ci->color1[1] * f;
ADDRLP4 468
ADDRLP4 300
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 472
CNSTF4 1325400064
ASGNF4
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
LTF4 $800
ADDRLP4 464
ADDRLP4 468
INDIRF4
ADDRLP4 472
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $801
JUMPV
LABELV $800
ADDRLP4 464
ADDRLP4 468
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $801
ADDRLP4 0+116+1
ADDRLP4 464
INDIRU4
CVUU1 4
ASGNU1
line 1285
;1285:			gun.shaderRGBA[2] = 255 * ci->color1[2] * f;
ADDRLP4 480
ADDRLP4 300
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRLP4 448
INDIRF4
MULF4
ASGNF4
ADDRLP4 484
CNSTF4 1325400064
ASGNF4
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
LTF4 $805
ADDRLP4 476
ADDRLP4 480
INDIRF4
ADDRLP4 484
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $806
JUMPV
LABELV $805
ADDRLP4 476
ADDRLP4 480
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $806
ADDRLP4 0+116+2
ADDRLP4 476
INDIRU4
CVUU1 4
ASGNU1
line 1287
;1286:			//gun.shaderRGBA[3] = 255;
;1287:		} else {
ADDRGP4 $786
JUMPV
LABELV $785
line 1288
;1288:			gun.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 452
ADDRLP4 300
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 456
CNSTF4 1325400064
ASGNF4
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
LTF4 $809
ADDRLP4 448
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $810
JUMPV
LABELV $809
ADDRLP4 448
ADDRLP4 452
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $810
ADDRLP4 0+116
ADDRLP4 448
INDIRU4
CVUU1 4
ASGNU1
line 1289
;1289:			gun.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 464
ADDRLP4 300
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $814
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $815
JUMPV
LABELV $814
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $815
ADDRLP4 0+116+1
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1290
;1290:			gun.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 476
ADDRLP4 300
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $819
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $820
JUMPV
LABELV $819
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $820
ADDRLP4 0+116+2
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1292
;1291:			//gun.shaderRGBA[3] = 255;
;1292:			if ( gun.shaderRGBA[1] < 64 ) gun.shaderRGBA[1] = 64;
ADDRLP4 0+116+1
INDIRU1
CVUI4 1
CNSTI4 64
GEI4 $821
ADDRLP4 0+116+1
CNSTU1 64
ASGNU1
LABELV $821
line 1293
;1293:		}
LABELV $786
line 1294
;1294:		gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1295
;1295:	}
ADDRGP4 $784
JUMPV
LABELV $783
line 1296
;1296:	else {
line 1297
;1297:		gun.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 452
ADDRLP4 300
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 456
CNSTF4 1325400064
ASGNF4
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
LTF4 $831
ADDRLP4 448
ADDRLP4 452
INDIRF4
ADDRLP4 456
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $832
JUMPV
LABELV $831
ADDRLP4 448
ADDRLP4 452
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $832
ADDRLP4 0+116
ADDRLP4 448
INDIRU4
CVUU1 4
ASGNU1
line 1298
;1298:		gun.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 464
ADDRLP4 300
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $836
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $837
JUMPV
LABELV $836
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $837
ADDRLP4 0+116+1
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1299
;1299:		gun.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 476
ADDRLP4 300
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $841
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $842
JUMPV
LABELV $841
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $842
ADDRLP4 0+116+2
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1300
;1300:		gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1301
;1301:	}
LABELV $784
line 1303
;1302:
;1303:	gun.hModel = weapon->weaponModel;
ADDRLP4 0+8
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1304
;1304:	if (!gun.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $846
line 1305
;1305:		return;
ADDRGP4 $778
JUMPV
LABELV $846
line 1308
;1306:	}
;1307:
;1308:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $849
line 1310
;1309:		// add weapon ready sound
;1310:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 0
ASGNI4
line 1311
;1311:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $851
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
EQI4 $851
line 1313
;1312:			// lightning gun and gauntlet make a different sound when fire is held down
;1313:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1314
;1314:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 1
ASGNI4
line 1315
;1315:		} else if ( weapon->readySound ) {
ADDRGP4 $852
JUMPV
LABELV $851
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $853
line 1316
;1316:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 448
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 716
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1317
;1317:		}
LABELV $853
LABELV $852
line 1318
;1318:	}
LABELV $849
line 1320
;1319:
;1320:	CG_PositionEntityOnTag( &gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 0
ARGP4
ADDRLP4 448
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
ARGP4
ADDRLP4 448
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $855
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1322
;1321:
;1322:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1325
;1323:
;1324:	// add the spinning barrel
;1325:	if ( weapon->barrelModel ) {
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $856
line 1326
;1326:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 304
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1327
;1327:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 304+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1328
;1328:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 304+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1329
;1329:		barrel.renderfx = parent->renderfx;
ADDRLP4 304+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1331
;1330:
;1331:		barrel.hModel = weapon->barrelModel;
ADDRLP4 304+8
ADDRLP4 280
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1332
;1332:		angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1333
;1333:		angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1334
;1334:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 452
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 452
INDIRF4
ASGNF4
line 1335
;1335:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 288
ARGP4
ADDRLP4 304+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1337
;1336:
;1337:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 304
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $865
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1339
;1338:
;1339:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 304
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1340
;1340:	}
LABELV $856
line 1343
;1341:
;1342:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1343:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 444
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1348
;1344:
;1345:	// if the index of the nonPredictedCent is not the same as the clientNum
;1346:	// then this is a fake player (like on teh single player podiums), so
;1347:	// go ahead and use the cent
;1348:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 444
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 740
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $866
line 1349
;1349:		nonPredictedCent = cent;
ADDRLP4 444
ADDRFP4 8
INDIRP4
ASGNP4
line 1350
;1350:	}
LABELV $866
line 1353
;1351:
;1352:	// add the flash
;1353:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
ADDRLP4 284
INDIRI4
CNSTI4 6
EQI4 $871
ADDRLP4 284
INDIRI4
CNSTI4 1
EQI4 $871
ADDRLP4 284
INDIRI4
CNSTI4 10
NEI4 $868
LABELV $871
ADDRLP4 444
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $868
line 1355
;1354:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) 
;1355:	{
line 1357
;1356:		// continuous flash
;1357:	} else {
ADDRGP4 $869
JUMPV
LABELV $868
line 1359
;1358:		// impulse flash
;1359:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 456
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 456
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $872
ADDRLP4 456
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $872
line 1360
;1360:			return;
ADDRGP4 $778
JUMPV
LABELV $872
line 1362
;1361:		}
;1362:	}
LABELV $869
line 1364
;1363:
;1364:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1365
;1365:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1366
;1366:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 140+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1367
;1367:	flash.renderfx = parent->renderfx;
ADDRLP4 140+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1369
;1368:
;1369:	flash.hModel = weapon->flashModel;
ADDRLP4 140+8
ADDRLP4 280
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1370
;1370:	if (!flash.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $879
line 1371
;1371:		return;
ADDRGP4 $778
JUMPV
LABELV $879
line 1373
;1372:	}
;1373:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 1374
;1374:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 1375
;1375:	angles[ROLL] = crandom() * 10;
ADDRLP4 456
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 288+8
ADDRLP4 456
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
ASGNF4
line 1376
;1376:	AnglesToAxis( angles, flash.axis );
ADDRLP4 288
ARGP4
ADDRLP4 140+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1379
;1377:
;1378:	// colorize the railgun blast
;1379:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 284
INDIRI4
CNSTI4 7
NEI4 $885
line 1380
;1380:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 464
ADDRLP4 300
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $889
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $890
JUMPV
LABELV $889
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $890
ADDRLP4 140+116
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 1381
;1381:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 476
ADDRLP4 300
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $894
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $895
JUMPV
LABELV $894
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $895
ADDRLP4 140+116+1
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 1382
;1382:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 488
ADDRLP4 300
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 492
CNSTF4 1325400064
ASGNF4
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
LTF4 $899
ADDRLP4 484
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $900
JUMPV
LABELV $899
ADDRLP4 484
ADDRLP4 488
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $900
ADDRLP4 140+116+2
ADDRLP4 484
INDIRU4
CVUU1 4
ASGNU1
line 1383
;1383:		flash.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 1384
;1384:	}
LABELV $885
line 1386
;1385:
;1386:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash" );
ADDRLP4 140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $903
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1387
;1387:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1389
;1388:
;1389:	if ( ps || cg.renderingThirdPerson || cent->currentState.number != cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $910
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $910
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
EQI4 $904
LABELV $910
line 1393
;1390:		int radius;
;1391:
;1392:		// add lightning bolt
;1393:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 444
INDIRP4
ARGP4
ADDRLP4 140+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1396
;1394:
;1395:		// add rail trail
;1396:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 140+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1400
;1397:
;1398:		// use our own muzzle point as dlight origin 
;1399:		// and put it a bit closer to vieworigin to avoid bad normals near walls
;1400:		if ( ps && cent->currentState.number == cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $913
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $913
line 1403
;1401:			vec3_t	start, end, muzzle, forward, up;
;1402:			trace_t	tr;
;1403:			AngleVectors( cg.refdefViewAngles, forward, NULL, up );
ADDRGP4 cg+109424
ARGP4
ADDRLP4 464
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 512
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1404
;1404:			VectorMA( cg.refdef.vieworg, 14, forward, muzzle );
ADDRLP4 476
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1405
;1405:			if ( weaponNum == WP_LIGHTNING )
ADDRLP4 284
INDIRI4
CNSTI4 6
NEI4 $930
line 1406
;1406:				VectorMA( muzzle, -8, up, muzzle );
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRGP4 $931
JUMPV
LABELV $930
line 1408
;1407:			else
;1408:				VectorMA( muzzle, -6, up, muzzle );
ADDRLP4 476
ADDRLP4 476
INDIRF4
ADDRLP4 512
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 512+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 476+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 512+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
LABELV $931
line 1409
;1409:			VectorMA( cg.refdef.vieworg, 14, forward, start );
ADDRLP4 488
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 488+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 1410
;1410:			VectorMA( cg.refdef.vieworg, 28, forward, end );
ADDRLP4 500
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
ADDRLP4 500+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1105199104
MULF4
ADDF4
ASGNF4
line 1411
;1411:			CG_Trace( &tr, start, NULL, NULL, end, cent->currentState.number, MASK_SHOT | CONTENTS_TRANSLUCENT );
ADDRLP4 524
ARGP4
ADDRLP4 488
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 500
ARGP4
ADDRFP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 637534209
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1412
;1412:			if ( tr.fraction != 1.0 ) {
ADDRLP4 524+8
INDIRF4
CNSTF4 1065353216
EQF4 $968
line 1413
;1413:				VectorMA( muzzle, -13.0 * ( 1.0 - tr.fraction ), forward, flash.origin );
ADDRLP4 140+68
ADDRLP4 476
INDIRF4
ADDRLP4 464
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+68+4
ADDRLP4 476+4
INDIRF4
ADDRLP4 464+4
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+68+8
ADDRLP4 476+8
INDIRF4
ADDRLP4 464+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 524+8
INDIRF4
SUBF4
CNSTF4 3243245568
MULF4
MULF4
ADDF4
ASGNF4
line 1414
;1414:			} else {
ADDRGP4 $969
JUMPV
LABELV $968
line 1415
;1415:				VectorCopy( muzzle, flash.origin );
ADDRLP4 140+68
ADDRLP4 476
INDIRB
ASGNB 12
line 1416
;1416:			}
LABELV $969
line 1417
;1417:		}
LABELV $913
line 1419
;1418:
;1419:		if ( weaponNum == WP_MACHINEGUN ) // make it a bit less annoying
ADDRLP4 284
INDIRI4
CNSTI4 2
NEI4 $984
line 1420
;1420:			radius = MG_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 464
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 464
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
ASGNI4
ADDRGP4 $985
JUMPV
LABELV $984
line 1422
;1421:		else
;1422:			radius = WEAPON_FLASH_RADIUS + (rand() & WEAPON_FLASH_RADIUS_MOD);
ADDRLP4 468
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 460
ADDRLP4 468
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
ASGNI4
LABELV $985
line 1424
;1423:
;1424:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
NEF4 $989
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
NEF4 $989
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 0
EQF4 $986
LABELV $989
line 1425
;1425:			trap_R_AddLightToScene( flash.origin, radius, 
ADDRLP4 140+68
ARGP4
ADDRLP4 460
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 280
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1427
;1426:				weapon->flashDlightColor[0], weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;1427:		}
LABELV $986
line 1428
;1428:	}
LABELV $904
line 1429
;1429:}
LABELV $778
endproc CG_AddPlayerWeapon 580 28
export CG_AddViewWeapon
proc CG_AddViewWeapon 188 16
line 1439
;1430:
;1431:
;1432:/*
;1433:==============
;1434:CG_AddViewWeapon
;1435:
;1436:Add the weapon, and flash for the player's view
;1437:==============
;1438:*/
;1439:void CG_AddViewWeapon( playerState_t *ps ) {
line 1447
;1440:	refEntity_t	hand;
;1441:	centity_t	*cent;
;1442:	const clientInfo_t *ci;
;1443:	const weaponInfo_t *weapon;
;1444:	vec3_t		fovOffset;
;1445:	vec3_t		angles;
;1446:
;1447:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $992
line 1448
;1448:		return;
ADDRGP4 $991
JUMPV
LABELV $992
line 1451
;1449:	}
;1450:
;1451:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $994
line 1452
;1452:		return;
ADDRGP4 $991
JUMPV
LABELV $994
line 1457
;1453:	}
;1454:
;1455:	// no gun if in third person view or a camera is active
;1456:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1457:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $996
line 1458
;1458:		return;
ADDRGP4 $991
JUMPV
LABELV $996
line 1463
;1459:	}
;1460:
;1461:
;1462:	// allow the gun to be completely removed
;1463:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $999
line 1466
;1464:		vec3_t		origin;
;1465:
;1466:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+107636+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $991
line 1468
;1467:			// special hack for lightning gun...
;1468:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 176
ADDRGP4 cg+109056+24
INDIRB
ASGNB 12
line 1469
;1469:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 176
ADDRLP4 176
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 176+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
line 1470
;1470:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1471
;1471:		}
line 1472
;1472:		return;
ADDRGP4 $991
JUMPV
LABELV $999
line 1476
;1473:	}
;1474:
;1475:	// don't draw if testing a gun model
;1476:	if ( cg.testGun ) {
ADDRGP4 cg+126108
INDIRI4
CNSTI4 0
EQI4 $1023
line 1477
;1477:		return;
ADDRGP4 $991
JUMPV
LABELV $1023
line 1481
;1478:	}
;1479:
;1480:	// drop gun lower at higher fov
;1481:	if ( cgs.fov > 90.0 ) {
ADDRGP4 cgs+150068
INDIRF4
CNSTF4 1119092736
LEF4 $1026
line 1482
;1482:		fovOffset[0] = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 1483
;1483:		fovOffset[2] = -0.2 * ( cgs.fov - 90.0 );
ADDRLP4 140+8
ADDRGP4 cgs+150068
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1484
;1484:	} else {
ADDRGP4 $1027
JUMPV
LABELV $1026
line 1486
;1485:		// move gun forward at lowerer fov
;1486:		fovOffset[0] = -0.2 * ( cgs.fov - 90.0 );
ADDRLP4 140
ADDRGP4 cgs+150068
INDIRF4
CNSTF4 1119092736
SUBF4
CNSTF4 3192704205
MULF4
ASGNF4
line 1487
;1487:		fovOffset[2] = 0;
ADDRLP4 140+8
CNSTF4 0
ASGNF4
line 1488
;1488:	}
LABELV $1027
line 1490
;1489:
;1490:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 152
ADDRGP4 cg+108104
ASGNP4
line 1491
;1491:	CG_RegisterWeapon( ps->weapon );
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1492
;1492:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1494
;1493:
;1494:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTU4 140
ARGU4
ADDRGP4 memset
CALLP4
pop
line 1497
;1495:
;1496:	// set up gun position
;1497:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 160
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1499
;1498:
;1499:	VectorMA( hand.origin, (cg_gun_x.value+fovOffset[0]), cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1500
;1500:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1501
;1501:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset[2]), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1503
;1502:
;1503:	AnglesToAxis( angles, hand.axis );
ADDRLP4 160
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1506
;1504:
;1505:	// map torso animations to weapon animations
;1506:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1108
line 1508
;1507:		// development tool
;1508:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 176
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 176
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1509
;1509:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1510
;1510:	} else {
ADDRGP4 $1109
JUMPV
LABELV $1108
line 1512
;1511:		// get clientinfo for animation map
;1512:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 172
ADDRLP4 152
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996
ADDP4
ASGNP4
line 1513
;1513:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 176
INDIRI4
ASGNI4
line 1514
;1514:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 152
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 180
INDIRI4
ASGNI4
line 1515
;1515:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 152
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ASGNF4
line 1516
;1516:	}
LABELV $1109
line 1518
;1517:
;1518:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1519
;1519:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1522
;1520:
;1521:	// add everything onto the hand
;1522:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM] );
ADDRLP4 0
ARGP4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 cg+108104
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1523
;1523:}
LABELV $991
endproc CG_AddViewWeapon 188 16
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 60 32
line 1540
;1524:
;1525:/*
;1526:==============================================================================
;1527:
;1528:WEAPON SELECTION
;1529:
;1530:==============================================================================
;1531:*/
;1532:
;1533:
;1534:/*
;1535:===================
;1536:CG_DrawWeaponSelect
;1537:===================
;1538:*/
;1539:#define AMMO_FONT_SIZE 12
;1540:void CG_DrawWeaponSelect( void ) {
line 1552
;1541:	int		i;
;1542:	int		bits;
;1543:	int		count;
;1544:	int		x, y;
;1545:	int		dx, dy;
;1546:	int		weaponSelect;
;1547:	const char *name;
;1548:	float	*color;
;1549:	char	buf[16];
;1550:
;1551:	// don't display if dead
;1552:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 || cg_drawWeaponSelect.integer == 0 ) {
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
LEI4 $1128
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
NEI4 $1123
LABELV $1128
line 1553
;1553:		return;
ADDRGP4 $1122
JUMPV
LABELV $1123
line 1556
;1554:	}
;1555:
;1556:	if ( cg_drawWeaponSelect.integer < 0 ) {
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
CNSTI4 0
GEI4 $1129
line 1557
;1557:		color = colorWhite;
ADDRLP4 32
ADDRGP4 colorWhite
ASGNP4
line 1558
;1558:	} else {
ADDRGP4 $1130
JUMPV
LABELV $1129
line 1559
;1559:		color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
ADDRGP4 cg+125796
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 56
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 56
INDIRP4
ASGNP4
line 1560
;1560:		if ( !color ) {
ADDRLP4 32
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1133
line 1561
;1561:			return;
ADDRGP4 $1122
JUMPV
LABELV $1133
line 1563
;1562:		}
;1563:	}
LABELV $1130
line 1564
;1564:	trap_R_SetColor( color );
ADDRLP4 32
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1566
;1565:
;1566:	weaponSelect = abs( cg_drawWeaponSelect.integer );
ADDRGP4 cg_drawWeaponSelect+12
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 56
INDIRI4
ASGNI4
line 1569
;1567:
;1568:	// showing weapon select clears pickup item display, but not the blend blob
;1569:	cg.itemPickupTime = 0;
ADDRGP4 cg+125788
CNSTI4 0
ASGNI4
line 1572
;1570:
;1571:	// count the number of weapons owned
;1572:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
ASGNI4
line 1573
;1573:	count = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 1574
;1574:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1138
line 1575
;1575:		if ( bits & ( 1 << i ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1142
line 1576
;1576:			count++;
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1577
;1577:		}
LABELV $1142
line 1578
;1578:	}
LABELV $1139
line 1574
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1138
line 1580
;1579:
;1580:	if ( weaponSelect < 3 ) {
ADDRLP4 24
INDIRI4
CNSTI4 3
GEI4 $1144
line 1581
;1581:		x = 320 - count * 20;
ADDRLP4 8
CNSTI4 320
ADDRLP4 28
INDIRI4
CNSTI4 20
MULI4
SUBI4
ASGNI4
line 1582
;1582:		y = cgs.screenYmax + 1 - 100; // - STATUSBAR_HEIGHT - 40
ADDRLP4 4
ADDRGP4 cgs+31464
INDIRF4
CNSTF4 1065353216
ADDF4
CNSTF4 1120403456
SUBF4
CVFI4 4
ASGNI4
line 1583
;1583:		dx = 40;
ADDRLP4 16
CNSTI4 40
ASGNI4
line 1584
;1584:		dy = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 1585
;1585:	} else {
ADDRGP4 $1145
JUMPV
LABELV $1144
line 1586
;1586:		x = cgs.screenXmin + 6;
ADDRLP4 8
ADDRGP4 cgs+31452
INDIRF4
CNSTF4 1086324736
ADDF4
CVFI4 4
ASGNI4
line 1587
;1587:		y = 240 - count * 20;
ADDRLP4 4
CNSTI4 240
ADDRLP4 28
INDIRI4
CNSTI4 20
MULI4
SUBI4
ASGNI4
line 1588
;1588:		dx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1589
;1589:		dy = 40;
ADDRLP4 20
CNSTI4 40
ASGNI4
line 1590
;1590:	}
LABELV $1145
line 1592
;1591:
;1592:	for ( i = WP_GAUNTLET ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1148
line 1593
;1593:		if ( !( bits & ( 1 << i ) ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1152
line 1594
;1594:			continue;
ADDRGP4 $1149
JUMPV
LABELV $1152
line 1597
;1595:		}
;1596:
;1597:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1600
;1598:
;1599:		// draw weapon icon
;1600:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1603
;1601:
;1602:		// draw selection marker
;1603:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+108956
INDIRI4
NEI4 $1155
line 1604
;1604:			CG_DrawPic( x-4, y-4, 32+8, 32+8, cgs.media.selectShader );
ADDRLP4 8
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1109393408
ARGF4
ADDRGP4 cgs+148772+244
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1605
;1605:		}
LABELV $1155
line 1608
;1606:
;1607:		// no ammo cross on top
;1608:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1160
line 1609
;1609:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+148772+304
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1610
;1610:		} else if ( weaponSelect > 1 && cg.snap->ps.ammo[ i ] > 0 ) {
ADDRGP4 $1161
JUMPV
LABELV $1160
ADDRLP4 24
INDIRI4
CNSTI4 1
LEI4 $1165
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1165
line 1612
;1611:			// ammo counter
;1612:			BG_sprintf( buf, "%i", cg.snap->ps.ammo[ i ] );
ADDRLP4 36
ARGP4
ADDRGP4 $1168
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_sprintf
CALLI4
pop
line 1613
;1613:			if ( weaponSelect == 2 ) {
ADDRLP4 24
INDIRI4
CNSTI4 2
NEI4 $1170
line 1615
;1614:				// horizontal ammo counters
;1615:				CG_DrawString( x + 32/2, y - 20, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_CENTER | DS_PROPORTIONAL );
ADDRLP4 8
INDIRI4
CNSTI4 16
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 20
SUBI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
CNSTI4 0
ARGI4
CNSTI4 12
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1616
;1616:			} else {
ADDRGP4 $1171
JUMPV
LABELV $1170
line 1618
;1617:				// vectical ammo counters
;1618:				CG_DrawString( x + 39 + (3*AMMO_FONT_SIZE), y + (32-AMMO_FONT_SIZE)/2, buf, color, AMMO_FONT_SIZE, AMMO_FONT_SIZE, 0, DS_RIGHT );
ADDRLP4 8
INDIRI4
CNSTI4 39
ADDI4
CNSTI4 36
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRLP4 36
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1094713344
ARGF4
CNSTF4 1094713344
ARGF4
CNSTI4 0
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1619
;1619:			}
LABELV $1171
line 1620
;1620:		}
LABELV $1165
LABELV $1161
line 1622
;1621:
;1622:		x += dx;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
ADDI4
ASGNI4
line 1623
;1623:		y += dy;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
line 1624
;1624:	}
LABELV $1149
line 1592
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1148
line 1627
;1625:
;1626:	// draw the selected name
;1627:	if ( cg_weapons[ cg.weaponSelect ].item && weaponSelect == 1 ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1172
ADDRLP4 24
INDIRI4
CNSTI4 1
NEI4 $1172
line 1628
;1628:		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
ADDRLP4 52
ADDRGP4 cg+108956
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 1629
;1629:		if ( name ) {
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1178
line 1630
;1630:			CG_DrawString( 320, y - 22, name, color, BIGCHAR_WIDTH, BIGCHAR_HEIGHT, 0, DS_SHADOW | DS_PROPORTIONAL | DS_CENTER | DS_FORCE_COLOR );
CNSTF4 1134559232
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 22
SUBI4
CVIF4 4
ARGF4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 15
ARGI4
ADDRGP4 CG_DrawString
CALLV
pop
line 1631
;1631:		}
LABELV $1178
line 1632
;1632:	}
LABELV $1172
line 1634
;1633:
;1634:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1635
;1635:}
LABELV $1122
endproc CG_DrawWeaponSelect 60 32
proc CG_WeaponSelectable 0 0
line 1643
;1636:
;1637:
;1638:/*
;1639:===============
;1640:CG_WeaponSelectable
;1641:===============
;1642:*/
;1643:static qboolean CG_WeaponSelectable( int i ) {
line 1644
;1644:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1181
line 1645
;1645:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1180
JUMPV
LABELV $1181
line 1647
;1646:	}
;1647:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1184
line 1648
;1648:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1180
JUMPV
LABELV $1184
line 1651
;1649:	}
;1650:
;1651:	return qtrue;
CNSTI4 1
RETI4
LABELV $1180
endproc CG_WeaponSelectable 0 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 4
line 1660
;1652:}
;1653:
;1654:
;1655:/*
;1656:===============
;1657:CG_NextWeapon_f
;1658:===============
;1659:*/
;1660:void CG_NextWeapon_f( void ) {
line 1664
;1661:	int		i;
;1662:	int		original;
;1663:
;1664:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1188
line 1665
;1665:		return;
ADDRGP4 $1187
JUMPV
LABELV $1188
line 1668
;1666:	}
;1667:
;1668:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125796
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1670
;1669:
;1670:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1197
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1193
LABELV $1197
line 1671
;1671:		return;
ADDRGP4 $1187
JUMPV
LABELV $1193
line 1674
;1672:	}
;1673:
;1674:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1676
;1675:
;1676:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1199
line 1677
;1677:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1678
;1678:		if ( cg.weaponSelect == MAX_WEAPONS ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 16
NEI4 $1204
line 1679
;1679:			cg.weaponSelect = 0;
ADDRGP4 cg+108956
CNSTI4 0
ASGNI4
line 1680
;1680:		}
LABELV $1204
line 1681
;1681:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1208
line 1682
;1682:			continue;		// never cycle to gauntlet
ADDRGP4 $1200
JUMPV
LABELV $1208
line 1684
;1683:		}
;1684:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1211
line 1685
;1685:			break;
ADDRGP4 $1201
JUMPV
LABELV $1211
line 1687
;1686:		}
;1687:	}
LABELV $1200
line 1676
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1199
LABELV $1201
line 1688
;1688:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1214
line 1689
;1689:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1690
;1690:	}
LABELV $1214
line 1691
;1691:}
LABELV $1187
endproc CG_NextWeapon_f 16 4
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 4
line 1699
;1692:
;1693:
;1694:/*
;1695:===============
;1696:CG_PrevWeapon_f
;1697:===============
;1698:*/
;1699:void CG_PrevWeapon_f( void ) {
line 1703
;1700:	int		i;
;1701:	int		original;
;1702:
;1703:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1218
line 1704
;1704:		return;
ADDRGP4 $1217
JUMPV
LABELV $1218
line 1707
;1705:	}
;1706:
;1707:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125796
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1709
;1708:
;1709:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1227
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1223
LABELV $1227
line 1710
;1710:		return;
ADDRGP4 $1217
JUMPV
LABELV $1223
line 1713
;1711:	}
;1712:
;1713:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+108956
INDIRI4
ASGNI4
line 1715
;1714:
;1715:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1229
line 1716
;1716:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+108956
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1717
;1717:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 -1
NEI4 $1234
line 1718
;1718:			cg.weaponSelect = MAX_WEAPONS - 1;
ADDRGP4 cg+108956
CNSTI4 15
ASGNI4
line 1719
;1719:		}
LABELV $1234
line 1720
;1720:		if ( cg.weaponSelect == WP_GAUNTLET ) {
ADDRGP4 cg+108956
INDIRI4
CNSTI4 1
NEI4 $1238
line 1721
;1721:			continue;		// never cycle to gauntlet
ADDRGP4 $1230
JUMPV
LABELV $1238
line 1723
;1722:		}
;1723:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+108956
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1241
line 1724
;1724:			break;
ADDRGP4 $1231
JUMPV
LABELV $1241
line 1726
;1725:		}
;1726:	}
LABELV $1230
line 1715
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1229
LABELV $1231
line 1727
;1727:	if ( i == MAX_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1244
line 1728
;1728:		cg.weaponSelect = original;
ADDRGP4 cg+108956
ADDRLP4 4
INDIRI4
ASGNI4
line 1729
;1729:	}
LABELV $1244
line 1730
;1730:}
LABELV $1217
endproc CG_PrevWeapon_f 16 4
export CG_LastWeapon_f
proc CG_LastWeapon_f 4 4
line 1733
;1731:
;1732:
;1733:void CG_LastWeapon_f( void ) {
line 1734
;1734:	if ( !cg.snap || (cg.snap->ps.pm_flags & PMF_FOLLOW) || cg.demoPlayback || !cg.lastweapon ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1256
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1256
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
NEI4 $1256
ADDRGP4 cg+157040
INDIRI4
CNSTI4 0
NEI4 $1248
LABELV $1256
line 1735
;1735:		return;
ADDRGP4 $1247
JUMPV
LABELV $1248
line 1738
;1736:	}
;1737:
;1738:	if ( CG_WeaponSelectable( cg.lastweapon ) ) {
ADDRGP4 cg+157040
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $1257
line 1739
;1739:		cg.weaponSelect = cg.lastweapon;
ADDRGP4 cg+108956
ADDRGP4 cg+157040
INDIRI4
ASGNI4
line 1740
;1740:		cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125796
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1741
;1741:	}
LABELV $1257
line 1742
;1742:}
LABELV $1247
endproc CG_LastWeapon_f 4 4
export CG_Weapon_f
proc CG_Weapon_f 16 4
line 1750
;1743:
;1744:
;1745:/*
;1746:===============
;1747:CG_Weapon_f
;1748:===============
;1749:*/
;1750:void CG_Weapon_f( void ) {
line 1753
;1751:	int		num;
;1752:
;1753:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1265
line 1754
;1754:		return;
ADDRGP4 $1264
JUMPV
LABELV $1265
line 1757
;1755:	}
;1756:
;1757:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125796
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1759
;1758:
;1759:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1274
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1270
LABELV $1274
line 1760
;1760:		return;
ADDRGP4 $1264
JUMPV
LABELV $1270
line 1763
;1761:	}
;1762:
;1763:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1765
;1764:
;1765:	if ( num < 1 || num > MAX_WEAPONS-1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1277
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1275
LABELV $1277
line 1766
;1766:		return;
ADDRGP4 $1264
JUMPV
LABELV $1275
line 1769
;1767:	}
;1768:
;1769:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1278
line 1770
;1770:		return;		// don't have the weapon
ADDRGP4 $1264
JUMPV
LABELV $1278
line 1773
;1771:	}
;1772:
;1773:	cg.weaponSelect = num;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1774
;1774:}
LABELV $1264
endproc CG_Weapon_f 16 4
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 1784
;1775:
;1776:
;1777:/*
;1778:===================
;1779:CG_OutOfAmmoChange
;1780:
;1781:The current weapon has just run out of ammo
;1782:===================
;1783:*/
;1784:void CG_OutOfAmmoChange( void ) {
line 1787
;1785:	int		i;
;1786:
;1787:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+125796
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1789
;1788:
;1789:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW || cg.demoPlayback ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $1289
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $1285
LABELV $1289
line 1790
;1790:		return;
ADDRGP4 $1282
JUMPV
LABELV $1285
line 1793
;1791:	}
;1792:
;1793:	for ( i = MAX_WEAPONS-1 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1290
line 1794
;1794:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1294
line 1795
;1795:			cg.weaponSelect = i;
ADDRGP4 cg+108956
ADDRLP4 0
INDIRI4
ASGNI4
line 1796
;1796:			break;
ADDRGP4 $1292
JUMPV
LABELV $1294
line 1798
;1797:		}
;1798:	}
LABELV $1291
line 1793
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1290
LABELV $1292
line 1799
;1799:}
LABELV $1282
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 20 16
line 1817
;1800:
;1801:
;1802:/*
;1803:===================================================================================================
;1804:
;1805:WEAPON EVENTS
;1806:
;1807:===================================================================================================
;1808:*/
;1809:
;1810:/*
;1811:================
;1812:CG_FireWeapon
;1813:
;1814:Caused by an EV_FIRE_WEAPON event
;1815:================
;1816:*/
;1817:void CG_FireWeapon( centity_t *cent ) {
line 1822
;1818:	entityState_t *ent;
;1819:	int				c;
;1820:	weaponInfo_t	*weap;
;1821:
;1822:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 1823
;1823:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1298
line 1824
;1824:		return;
ADDRGP4 $1297
JUMPV
LABELV $1298
line 1826
;1825:	}
;1826:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 15
LTI4 $1300
line 1827
;1827:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $1302
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1828
;1828:		return;
ADDRGP4 $1297
JUMPV
LABELV $1300
line 1830
;1829:	}
;1830:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1832
;1831:
;1832:	if ( ent->number >= 0 && ent->number < MAX_CLIENTS && cent != &cg.predictedPlayerEntity ) {
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $1303
ADDRLP4 12
INDIRI4
CNSTI4 64
GEI4 $1303
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+108104
CVPU4 4
EQU4 $1303
line 1834
;1833:		// point from external event to client entity
;1834:		cent = &cg_entities[ ent->number ];
ADDRFP4 0
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1835
;1835:	}
LABELV $1303
line 1839
;1836:
;1837:	// mark the entity as muzzle flashing, so when it is added it will
;1838:	// append the flash to the weapon model
;1839:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1842
;1840:
;1841:	// lightning gun only does this this on initial press
;1842:	if ( ent->weapon == WP_LIGHTNING ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1307
line 1843
;1843:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1309
line 1844
;1844:			return;
ADDRGP4 $1297
JUMPV
LABELV $1309
line 1846
;1845:		}
;1846:	}
LABELV $1307
line 1849
;1847:
;1848:	// play quad sound if needed
;1849:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1311
line 1850
;1850:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+148772+624
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1851
;1851:	}
LABELV $1311
line 1854
;1852:
;1853:	// play a sound
;1854:	for ( c = 0 ; c < ARRAY_LEN( weap->flashSound ) ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1318
JUMPV
LABELV $1315
line 1855
;1855:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1319
line 1856
;1856:			break;
ADDRGP4 $1317
JUMPV
LABELV $1319
line 1858
;1857:		}
;1858:	}
LABELV $1316
line 1854
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1318
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 4
LTU4 $1315
LABELV $1317
line 1859
;1859:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1321
line 1860
;1860:		c = rand() % c;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 1861
;1861:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1323
line 1862
;1862:		{
line 1863
;1863:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1864
;1864:		}
LABELV $1323
line 1865
;1865:	}
LABELV $1321
line 1868
;1866:
;1867:	// do brass ejection
;1868:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1325
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1325
line 1869
;1869:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 1870
;1870:	}
LABELV $1325
line 1871
;1871:}
LABELV $1297
endproc CG_FireWeapon 20 16
export CG_MissileHitWall
proc CG_MissileHitWall 140 44
line 1881
;1872:
;1873:
;1874:/*
;1875:=================
;1876:CG_MissileHitWall
;1877:
;1878:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;1879:=================
;1880:*/
;1881:void CG_MissileHitWall( weapon_t weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 1897
;1882:	qhandle_t		mod;
;1883:	qhandle_t		mark;
;1884:	qhandle_t		shader;
;1885:	sfxHandle_t		sfx;
;1886:	float			radius;
;1887:	float			light;
;1888:	vec3_t			lightColor;
;1889:	localEntity_t	*le;
;1890:	int				r;
;1891:	qboolean		alphaFade;
;1892:	qboolean		isSprite;
;1893:	int				duration;
;1894:	vec3_t			sprOrg;
;1895:	vec3_t			sprVel;
;1896:
;1897:	mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1898
;1898:	radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 1899
;1899:	sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1900
;1900:	mod = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 1901
;1901:	shader = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1902
;1902:	light = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1903
;1903:	lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1904
;1904:	lightColor[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 1905
;1905:	lightColor[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 1908
;1906:
;1907:	// set defaults
;1908:	isSprite = qfalse;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 1909
;1909:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 1911
;1910:
;1911:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 2
LTI4 $1331
ADDRLP4 80
INDIRI4
CNSTI4 13
GTI4 $1331
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1475-8
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1475
address $1458
address $1426
address $1369
address $1378
address $1347
address $1397
address $1406
address $1415
address $1331
address $1334
address $1360
address $1433
code
LABELV $1331
LABELV $1334
line 1915
;1912:	default:
;1913:#ifdef MISSIONPACK
;1914:	case WP_NAILGUN:
;1915:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1335
line 1916
;1916:			sfx = cgs.media.sfx_nghitflesh;
ADDRLP4 16
ADDRGP4 cgs+148772+800
INDIRI4
ASGNI4
line 1917
;1917:		} else if( soundType == IMPACTSOUND_METAL ) {
ADDRGP4 $1336
JUMPV
LABELV $1335
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1339
line 1918
;1918:			sfx = cgs.media.sfx_nghitmetal;
ADDRLP4 16
ADDRGP4 cgs+148772+804
INDIRI4
ASGNI4
line 1919
;1919:		} else {
ADDRGP4 $1340
JUMPV
LABELV $1339
line 1920
;1920:			sfx = cgs.media.sfx_nghit;
ADDRLP4 16
ADDRGP4 cgs+148772+796
INDIRI4
ASGNI4
line 1921
;1921:		}
LABELV $1340
LABELV $1336
line 1922
;1922:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+428
INDIRI4
ASGNI4
line 1923
;1923:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 1924
;1924:		break;
ADDRGP4 $1332
JUMPV
LABELV $1347
line 1928
;1925:#endif
;1926:	case WP_LIGHTNING:
;1927:		// no explosion at LG impact, it is added with the beam
;1928:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 1929
;1929:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $1348
line 1930
;1930:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 16
ADDRGP4 cgs+148772+760
INDIRI4
ASGNI4
line 1931
;1931:		} else if ( r == 2 ) {
ADDRGP4 $1349
JUMPV
LABELV $1348
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $1352
line 1932
;1932:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 16
ADDRGP4 cgs+148772+756
INDIRI4
ASGNI4
line 1933
;1933:		} else {
ADDRGP4 $1353
JUMPV
LABELV $1352
line 1934
;1934:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 16
ADDRGP4 cgs+148772+764
INDIRI4
ASGNI4
line 1935
;1935:		}
LABELV $1353
LABELV $1349
line 1936
;1936:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+428
INDIRI4
ASGNI4
line 1937
;1937:		radius = 12;
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
line 1938
;1938:		break;
ADDRGP4 $1332
JUMPV
LABELV $1360
line 1941
;1939:#ifdef MISSIONPACK
;1940:	case WP_PROX_LAUNCHER:
;1941:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+484
INDIRI4
ASGNI4
line 1942
;1942:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+508
INDIRI4
ASGNI4
line 1943
;1943:		sfx = cgs.media.sfx_proxexp;
ADDRLP4 16
ADDRGP4 cgs+148772+792
INDIRI4
ASGNI4
line 1944
;1944:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+424
INDIRI4
ASGNI4
line 1945
;1945:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1946
;1946:		light = 300;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1947
;1947:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1948
;1948:		break;
ADDRGP4 $1332
JUMPV
LABELV $1369
line 1951
;1949:#endif
;1950:	case WP_GRENADE_LAUNCHER:
;1951:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+484
INDIRI4
ASGNI4
line 1952
;1952:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+508
INDIRI4
ASGNI4
line 1953
;1953:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+148772+784
INDIRI4
ASGNI4
line 1954
;1954:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+424
INDIRI4
ASGNI4
line 1955
;1955:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1956
;1956:		light = GL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1957
;1957:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1958
;1958:		break;
ADDRGP4 $1332
JUMPV
LABELV $1378
line 1960
;1959:	case WP_ROCKET_LAUNCHER:
;1960:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+484
INDIRI4
ASGNI4
line 1961
;1961:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+504
INDIRI4
ASGNI4
line 1962
;1962:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+148772+784
INDIRI4
ASGNI4
line 1963
;1963:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+424
INDIRI4
ASGNI4
line 1964
;1964:		radius = 64;
ADDRLP4 28
CNSTF4 1115684864
ASGNF4
line 1965
;1965:		light = RL_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 1966
;1966:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 1967
;1967:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 1968
;1968:		lightColor[0] = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1969
;1969:		lightColor[1] = 0.75;
ADDRLP4 4+4
CNSTF4 1061158912
ASGNF4
line 1970
;1970:		lightColor[2] = 0.0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 1971
;1971:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $1332
line 1973
;1972:			// explosion sprite animation
;1973:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
line 1974
;1974:			VectorScale( dir, 64, sprVel );
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
line 1976
;1975:
;1976:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $1396
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 1977
;1977:		}
line 1978
;1978:		break;
ADDRGP4 $1332
JUMPV
LABELV $1397
line 1980
;1979:	case WP_RAILGUN:
;1980:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+480
INDIRI4
ASGNI4
line 1981
;1981:		shader = cgs.media.railExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+492
INDIRI4
ASGNI4
line 1982
;1982:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+148772+788
INDIRI4
ASGNI4
line 1983
;1983:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+432
INDIRI4
ASGNI4
line 1984
;1984:		radius = 24;
ADDRLP4 28
CNSTF4 1103101952
ASGNF4
line 1985
;1985:		break;
ADDRGP4 $1332
JUMPV
LABELV $1406
line 1987
;1986:	case WP_PLASMAGUN:
;1987:		mod = cgs.media.ringFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+480
INDIRI4
ASGNI4
line 1988
;1988:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+496
INDIRI4
ASGNI4
line 1989
;1989:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+148772+788
INDIRI4
ASGNI4
line 1990
;1990:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+432
INDIRI4
ASGNI4
line 1991
;1991:		radius = 16;
ADDRLP4 28
CNSTF4 1098907648
ASGNF4
line 1992
;1992:		break;
ADDRGP4 $1332
JUMPV
LABELV $1415
line 1994
;1993:	case WP_BFG:
;1994:		mod = cgs.media.dishFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+484
INDIRI4
ASGNI4
line 1995
;1995:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+512
INDIRI4
ASGNI4
line 1996
;1996:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+148772+784
INDIRI4
ASGNI4
line 1997
;1997:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+424
INDIRI4
ASGNI4
line 1998
;1998:		radius = 32;
ADDRLP4 28
CNSTF4 1107296256
ASGNF4
line 1999
;1999:		light = BFG_EXPLOSION_RADIUS;
ADDRLP4 40
CNSTF4 1133903872
ASGNF4
line 2000
;2000:		lightColor[0] = 0.2f;
ADDRLP4 4
CNSTF4 1045220557
ASGNF4
line 2001
;2001:		lightColor[1] = 1.0f;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 2002
;2002:		lightColor[2] = 0.2f;
ADDRLP4 4+8
CNSTF4 1045220557
ASGNF4
line 2003
;2003:		isSprite = qtrue;
ADDRLP4 44
CNSTI4 1
ASGNI4
line 2004
;2004:		break;
ADDRGP4 $1332
JUMPV
LABELV $1426
line 2006
;2005:	case WP_SHOTGUN:
;2006:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+476
INDIRI4
ASGNI4
line 2007
;2007:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+500
INDIRI4
ASGNI4
line 2008
;2008:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+420
INDIRI4
ASGNI4
line 2009
;2009:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2010
;2010:		radius = 4;
ADDRLP4 28
CNSTF4 1082130432
ASGNF4
line 2011
;2011:		break;
ADDRGP4 $1332
JUMPV
LABELV $1433
line 2015
;2012:
;2013:#ifdef MISSIONPACK
;2014:	case WP_CHAINGUN:
;2015:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+476
INDIRI4
ASGNI4
line 2016
;2016:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1436
line 2017
;2017:			sfx = cgs.media.sfx_chghitflesh;
ADDRLP4 16
ADDRGP4 cgs+148772+812
INDIRI4
ASGNI4
line 2018
;2018:		} else if( soundType == IMPACTSOUND_METAL ) {
ADDRGP4 $1437
JUMPV
LABELV $1436
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1440
line 2019
;2019:			sfx = cgs.media.sfx_chghitmetal;
ADDRLP4 16
ADDRGP4 cgs+148772+816
INDIRI4
ASGNI4
line 2020
;2020:		} else {
ADDRGP4 $1441
JUMPV
LABELV $1440
line 2021
;2021:			sfx = cgs.media.sfx_chghit;
ADDRLP4 16
ADDRGP4 cgs+148772+808
INDIRI4
ASGNI4
line 2022
;2022:		}
LABELV $1441
LABELV $1437
line 2023
;2023:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+420
INDIRI4
ASGNI4
line 2025
;2024:
;2025:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2026
;2026:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $1448
line 2027
;2027:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+148772+768
INDIRI4
ASGNI4
line 2028
;2028:		} else if ( r == 2 ) {
ADDRGP4 $1449
JUMPV
LABELV $1448
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $1452
line 2029
;2029:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+148772+772
INDIRI4
ASGNI4
line 2030
;2030:		} else {
ADDRGP4 $1453
JUMPV
LABELV $1452
line 2031
;2031:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+148772+776
INDIRI4
ASGNI4
line 2032
;2032:		}
LABELV $1453
LABELV $1449
line 2034
;2033:
;2034:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 2035
;2035:		break;
ADDRGP4 $1332
JUMPV
LABELV $1458
line 2039
;2036:#endif
;2037:
;2038:	case WP_MACHINEGUN:
;2039:		mod = cgs.media.bulletFlashModel;
ADDRLP4 24
ADDRGP4 cgs+148772+476
INDIRI4
ASGNI4
line 2040
;2040:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 32
ADDRGP4 cgs+148772+500
INDIRI4
ASGNI4
line 2041
;2041:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+148772+420
INDIRI4
ASGNI4
line 2043
;2042:
;2043:		r = rand() & 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 96
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2044
;2044:		if ( r == 0 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $1465
line 2045
;2045:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+148772+768
INDIRI4
ASGNI4
line 2046
;2046:		} else if ( r == 1 ) {
ADDRGP4 $1466
JUMPV
LABELV $1465
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $1469
line 2047
;2047:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+148772+772
INDIRI4
ASGNI4
line 2048
;2048:		} else {
ADDRGP4 $1470
JUMPV
LABELV $1469
line 2049
;2049:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+148772+776
INDIRI4
ASGNI4
line 2050
;2050:		}
LABELV $1470
LABELV $1466
line 2052
;2051:
;2052:		radius = 8;
ADDRLP4 28
CNSTF4 1090519040
ASGNF4
line 2053
;2053:		break;
LABELV $1332
line 2056
;2054:	}
;2055:
;2056:	if ( sfx ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1477
line 2057
;2057:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2058
;2058:	}
LABELV $1477
line 2063
;2059:
;2060:	//
;2061:	// create the explosion
;2062:	//
;2063:	if ( mod ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $1479
line 2064
;2064:		le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 88
INDIRP4
ASGNP4
line 2065
;2065:		le->light = light;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 2066
;2066:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 20
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2067
;2067:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1481
line 2069
;2068:			// colorize with client color
;2069:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 20
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+44
ADDP4
INDIRB
ASGNB 12
line 2070
;2070:			le->refEntity.shaderRGBA[0] = le->color[0] * 255;
ADDRLP4 100
ADDRLP4 20
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $1486
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1487
JUMPV
LABELV $1486
ADDRLP4 92
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1487
ADDRLP4 20
INDIRP4
CNSTI4 268
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 2071
;2071:			le->refEntity.shaderRGBA[1] = le->color[1] * 255;
ADDRLP4 116
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 120
CNSTF4 1325400064
ASGNF4
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1489
ADDRLP4 108
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1490
JUMPV
LABELV $1489
ADDRLP4 108
ADDRLP4 116
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1490
ADDRLP4 20
INDIRP4
CNSTI4 269
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 2072
;2072:			le->refEntity.shaderRGBA[2] = le->color[2] * 255;
ADDRLP4 132
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 136
CNSTF4 1325400064
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LTF4 $1492
ADDRLP4 124
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1493
JUMPV
LABELV $1492
ADDRLP4 124
ADDRLP4 132
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1493
ADDRLP4 20
INDIRP4
CNSTI4 270
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 2073
;2073:			le->refEntity.shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 271
ADDP4
CNSTU1 255
ASGNU1
line 2074
;2074:		}
LABELV $1481
line 2075
;2075:	}
LABELV $1479
line 2080
;2076:
;2077:	//
;2078:	// impact mark
;2079:	//
;2080:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+148772+432
INDIRI4
NEI4 $1497
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $1498
JUMPV
LABELV $1497
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $1498
ADDRLP4 36
ADDRLP4 88
INDIRI4
ASGNI4
line 2081
;2081:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1499
line 2085
;2082:		float	*color;
;2083:
;2084:		// colorize with client color
;2085:		color = cgs.clientinfo[ clientNum ].color1; // was color2
ADDRLP4 92
ADDRFP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+44
ADDP4
ASGNP4
line 2087
;2086:
;2087:		CG_ImpactMark( mark, origin, dir, random()*360, color[0], color[1], color[2], 1.0, alphaFade, radius, qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2088
;2088:	} else {
ADDRGP4 $1500
JUMPV
LABELV $1499
line 2089
;2089:		CG_ImpactMark( mark, origin, dir, random()*360, 1.0, 1.0, 1.0, 1.0, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2090
;2090:	}
LABELV $1500
line 2091
;2091:}
LABELV $1328
endproc CG_MissileHitWall 140 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 2099
;2092:
;2093:
;2094:/*
;2095:=================
;2096:CG_MissileHitPlayer
;2097:=================
;2098:*/
;2099:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 2100
;2100:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2104
;2101:
;2102:	// some weapons will make an explosion with the blood, while
;2103:	// others will just make the blood
;2104:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1505
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1505
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1507-16
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1507
address $1506
address $1506
address $1505
address $1505
address $1506
address $1506
address $1505
address $1506
address $1506
address $1506
code
LABELV $1506
line 2114
;2105:	case WP_GRENADE_LAUNCHER:
;2106:	case WP_ROCKET_LAUNCHER:
;2107:	case WP_PLASMAGUN:
;2108:	case WP_BFG:
;2109:#ifdef MISSIONPACK
;2110:	case WP_NAILGUN:
;2111:	case WP_CHAINGUN:
;2112:	case WP_PROX_LAUNCHER:
;2113:#endif
;2114:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2115
;2115:		break;
line 2117
;2116:	default:
;2117:		break;
LABELV $1505
line 2119
;2118:	}
;2119:}
LABELV $1503
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 128 28
line 2136
;2120:
;2121:
;2122:
;2123:/*
;2124:============================================================================
;2125:
;2126:SHOTGUN TRACING
;2127:
;2128:============================================================================
;2129:*/
;2130:
;2131:/*
;2132:================
;2133:CG_ShotgunPellet
;2134:================
;2135:*/
;2136:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 2140
;2137:	trace_t		tr;
;2138:	int sourceContentType, destContentType;
;2139:
;2140:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2142
;2141:
;2142:	sourceContentType = CG_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 2143
;2143:	destContentType = CG_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 2146
;2144:
;2145:	// FIXME: should probably move this cruft into CG_BubbleTrail
;2146:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $1511
line 2147
;2147:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1512
line 2148
;2148:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2149
;2149:		}
line 2150
;2150:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $1512
JUMPV
LABELV $1511
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1516
line 2153
;2151:		trace_t trace;
;2152:
;2153:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2154
;2154:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2155
;2155:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $1517
JUMPV
LABELV $1516
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1519
line 2158
;2156:		trace_t trace;
;2157:
;2158:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2159
;2159:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2160
;2160:	}
LABELV $1519
LABELV $1517
LABELV $1512
line 2162
;2161:
;2162:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1523
line 2163
;2163:		return;
ADDRGP4 $1509
JUMPV
LABELV $1523
line 2166
;2164:	}
;2165:
;2166:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
ADDRLP4 0+52
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1526
line 2167
;2167:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 2168
;2168:	} else {
ADDRGP4 $1527
JUMPV
LABELV $1526
line 2169
;2169:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1533
line 2171
;2170:			// SURF_NOIMPACT will not make a flame puff or a mark
;2171:			return;
ADDRGP4 $1509
JUMPV
LABELV $1533
line 2173
;2172:		}
;2173:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1536
line 2174
;2174:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2175
;2175:		} else {
ADDRGP4 $1537
JUMPV
LABELV $1536
line 2176
;2176:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2177
;2177:		}
LABELV $1537
line 2178
;2178:	}
LABELV $1527
line 2179
;2179:}
LABELV $1509
endproc CG_ShotgunPellet 128 28
proc CG_ShotgunPattern 88 12
line 2189
;2180:
;2181:/*
;2182:================
;2183:CG_ShotgunPattern
;2184:
;2185:Perform the same traces the server did to locate the
;2186:hit splashes
;2187:================
;2188:*/
;2189:static void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 2197
;2190:	int			i;
;2191:	float		r, u;
;2192:	vec3_t		end;
;2193:	vec3_t		forward, right, up;
;2194:
;2195:	// derive the right and up vectors from the forward vector, because
;2196:	// the client won't have any other information
;2197:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 2198
;2198:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 2199
;2199:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 2202
;2200:
;2201:	// generate the "random" spread pattern
;2202:	for ( i = 0 ; i < cgs.g_sgPellets ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 $1547
JUMPV
LABELV $1544
line 2203
;2203:		r = Q_crandom( &seed ) * cgs.g_sgPelletSpread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 64
ADDRGP4 cgs+150060
INDIRU4
ASGNU4
ADDRLP4 12
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
MULF4
CNSTF4 1098907648
MULF4
ASGNF4
line 2204
;2204:		u = Q_crandom( &seed ) * cgs.g_sgPelletSpread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 68
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 72
ADDRGP4 cgs+150060
INDIRU4
ASGNU4
ADDRLP4 16
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 72
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
MULF4
CNSTF4 1098907648
MULF4
ASGNF4
line 2205
;2205:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 20
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 2206
;2206:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2207
;2207:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2209
;2208:
;2209:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 2210
;2210:	}
LABELV $1545
line 2202
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1547
ADDRLP4 56
INDIRI4
CVIU4 4
ADDRGP4 cgs+150064
INDIRU4
LTU4 $1544
line 2211
;2211:}
LABELV $1543
endproc CG_ShotgunPattern 88 12
export CG_ShotgunFire
proc CG_ShotgunFire 44 48
line 2218
;2212:
;2213:/*
;2214:==============
;2215:CG_ShotgunFire
;2216:==============
;2217:*/
;2218:void CG_ShotgunFire( entityState_t *es ) {
line 2222
;2219:	vec3_t	v;
;2220:	int		contents;
;2221:
;2222:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2223
;2223:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2224
;2224:	VectorScale( v, 32, v );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
line 2225
;2225:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2226
;2226:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $1578
line 2230
;2227:		// ragepro can't alpha fade, so don't even bother with smoke
;2228:		vec3_t			up;
;2229:
;2230:		contents = CG_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 2231
;2231:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $1582
line 2232
;2232:			VectorSet( up, 0, 0, 8 );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 1090519040
ASGNF4
line 2233
;2233:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+148772+316
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2234
;2234:		}
LABELV $1582
line 2235
;2235:	}
LABELV $1578
line 2236
;2236:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 2237
;2237:}
LABELV $1567
endproc CG_ShotgunFire 44 48
export CG_Tracer
proc CG_Tracer 216 16
line 2253
;2238:
;2239:/*
;2240:============================================================================
;2241:
;2242:BULLETS
;2243:
;2244:============================================================================
;2245:*/
;2246:
;2247:
;2248:/*
;2249:===============
;2250:CG_Tracer
;2251:===============
;2252:*/
;2253:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 2262
;2254:	vec3_t		forward, right;
;2255:	polyVert_t	verts[4];
;2256:	vec3_t		line;
;2257:	float		len, begin, end;
;2258:	vec3_t		start, finish;
;2259:	vec3_t		midpoint;
;2260:
;2261:	// tracer
;2262:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2263
;2263:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 188
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 188
INDIRF4
ASGNF4
line 2266
;2264:
;2265:	// start at least a little ways from the muzzle
;2266:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $1592
line 2267
;2267:		return;
ADDRGP4 $1589
JUMPV
LABELV $1592
line 2269
;2268:	}
;2269:	begin = 50 + random() * (len - 60);
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 2270
;2270:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 2271
;2271:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $1595
line 2272
;2272:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 2273
;2273:	}
LABELV $1595
line 2274
;2274:	VectorMA( source, begin, forward, start );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 196
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 2275
;2275:	VectorMA( source, end, forward, finish );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 2277
;2276:
;2277:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2278
;2278:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2280
;2279:
;2280:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 2281
;2281:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 212
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2282
;2282:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2284
;2283:
;2284:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2285
;2285:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 2286
;2286:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 2287
;2287:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 2288
;2288:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 2289
;2289:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 2290
;2290:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 2292
;2291:
;2292:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2293
;2293:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 2294
;2294:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 2295
;2295:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 2296
;2296:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 2297
;2297:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 2298
;2298:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 2300
;2299:
;2300:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 2301
;2301:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 2302
;2302:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 2303
;2303:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 2304
;2304:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 2305
;2305:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 2306
;2306:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 2308
;2307:
;2308:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2309
;2309:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 2310
;2310:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 2311
;2311:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 2312
;2312:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 2313
;2313:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 2314
;2314:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 2316
;2315:
;2316:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+148772+252
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 2318
;2317:
;2318:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2319
;2319:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2320
;2320:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 2323
;2321:
;2322:	// add the tracer sound
;2323:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148772+628
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2325
;2324:
;2325:}
LABELV $1589
endproc CG_Tracer 216 16
proc CG_CalcMuzzlePoint 36 16
line 2333
;2326:
;2327:
;2328:/*
;2329:======================
;2330:CG_CalcMuzzlePoint
;2331:======================
;2332:*/
;2333:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 2338
;2334:	vec3_t		forward;
;2335:	centity_t	*cent;
;2336:	int			anim;
;2337:
;2338:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1777
line 2339
;2339:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 2340
;2340:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2341
;2341:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2342
;2342:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2343
;2343:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1776
JUMPV
LABELV $1777
line 2346
;2344:	}
;2345:
;2346:	cent = &cg_entities[entityNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 740
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2347
;2347:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1785
line 2348
;2348:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1776
JUMPV
LABELV $1785
line 2351
;2349:	}
;2350:
;2351:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2353
;2352:
;2353:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2354
;2354:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 2355
;2355:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1789
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $1787
LABELV $1789
line 2356
;2356:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 2357
;2357:	} else {
ADDRGP4 $1788
JUMPV
LABELV $1787
line 2358
;2358:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 2359
;2359:	}
LABELV $1788
line 2361
;2360:
;2361:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 2363
;2362:
;2363:	return qtrue;
CNSTI4 1
RETI4
LABELV $1776
endproc CG_CalcMuzzlePoint 36 16
export CG_Bullet
proc CG_Bullet 96 28
line 2374
;2364:
;2365:}
;2366:
;2367:/*
;2368:======================
;2369:CG_Bullet
;2370:
;2371:Renders bullet effects.
;2372:======================
;2373:*/
;2374:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 2381
;2375:	trace_t trace;
;2376:	int sourceContentType, destContentType;
;2377:	vec3_t		start;
;2378:
;2379:	// if the shooter is currently valid, calc a source point and possibly
;2380:	// do trail effects
;2381:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $1793
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $1793
line 2382
;2382:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1796
line 2383
;2383:			sourceContentType = CG_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 2384
;2384:			destContentType = CG_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 2387
;2385:
;2386:			// do a complete bubble trail if necessary
;2387:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1798
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1798
line 2388
;2388:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2389
;2389:			}
ADDRGP4 $1799
JUMPV
LABELV $1798
line 2391
;2390:			// bubble trail from water into air
;2391:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1800
line 2392
;2392:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2393
;2393:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2394
;2394:			}
ADDRGP4 $1801
JUMPV
LABELV $1800
line 2396
;2395:			// bubble trail from air into water
;2396:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1803
line 2397
;2397:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2398
;2398:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2399
;2399:			}
LABELV $1803
LABELV $1801
LABELV $1799
line 2402
;2400:
;2401:			// draw a tracer
;2402:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $1806
line 2403
;2403:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 2404
;2404:			}
LABELV $1806
line 2405
;2405:		}
LABELV $1796
line 2406
;2406:	}
LABELV $1793
line 2409
;2407:
;2408:	// impact splash and mark
;2409:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1809
line 2410
;2410:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 2411
;2411:	} else {
ADDRGP4 $1810
JUMPV
LABELV $1809
line 2412
;2412:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2413
;2413:	}
LABELV $1810
line 2415
;2414:
;2415:}
LABELV $1792
endproc CG_Bullet 96 28
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_LoadVoiceChats
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_kickScale
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_bigFont
import cg_smallFont
import cg_noProjectileTrail
import cg_noTaunt
import cg_cameraMode
import cg_smoothClients
import cg_scorePlum
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_hudFiles
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_enableBreath
import cg_enableDust
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_blood
import cg_paused
import cg_buildScript
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_stats
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_deferPlayers
import cg_predictItems
import cg_forceModel
import cg_teamChatHeight
import cg_teamChatTime
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_railTrailRadius
import cg_railTrailTime
import cg_lagometer
import cg_addMarks
import cg_simpleItems
import cg_brassTime
import cg_crosshairY
import cg_crosshairX
import cg_crosshairHealth
import cg_crosshairSize
import cg_drawWeaponSelect
import cg_drawRewards
import cg_crosshairColor
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawSpeed
import cg_drawAttacker
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_drawStatus
import cg_draw2D
import cg_gibs
import cg_shadows
import cg_viewsize
import cg_fov
import cg_zoomFov
import cg_drawGun
import cg_autoswitch
import cg_ignore
import cg_playback_follow
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorPink
import colorOrange
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1396
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $1302
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1168
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $903
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $865
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $855
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $764
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $610
byte 1 37
byte 1 115
byte 1 95
byte 1 100
byte 1 102
byte 1 0
align 1
LABELV $604
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $597
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $596
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $593
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $592
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $590
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $585
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $582
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $581
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $579
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $576
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $573
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $572
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $570
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 119
byte 1 110
byte 1 97
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $569
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $565
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $564
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $562
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $559
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 47
byte 1 119
byte 1 115
byte 1 116
byte 1 98
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $558
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $556
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $553
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $552
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $551
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $549
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $545
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $544
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $543
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $542
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $540
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $537
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $536
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $535
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $534
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $533
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $531
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 117
byte 1 108
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $530
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 82
byte 1 111
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $527
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 50
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 95
byte 1 103
byte 1 114
byte 1 105
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $525
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $522
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $519
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $516
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $513
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $510
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $509
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $508
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $506
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $505
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $498
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $497
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $496
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $482
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
